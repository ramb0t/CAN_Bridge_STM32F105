
CAN_Bridge_F105_CubeMx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b94  08003b94  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003b94  08003b94  00013b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b9c  08003b9c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b9c  08003b9c  00013b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ba0  08003ba0  00013ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000070  08003c14  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08003c14  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f35  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b24  00000000  00000000  00028fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000838  00000000  00000000  0002aaf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000740  00000000  00000000  0002b330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bcd1  00000000  00000000  0002ba70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007735  00000000  00000000  00047741  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096e13  00000000  00000000  0004ee76  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5c89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026cc  00000000  00000000  000e5d04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080039b4 	.word	0x080039b4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080039b4 	.word	0x080039b4

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	; 0x28
 800052c:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800052e:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <MX_CAN1_Init+0xb8>)
 8000530:	4a2c      	ldr	r2, [pc, #176]	; (80005e4 <MX_CAN1_Init+0xbc>)
 8000532:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000534:	4b2a      	ldr	r3, [pc, #168]	; (80005e0 <MX_CAN1_Init+0xb8>)
 8000536:	2202      	movs	r2, #2
 8000538:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800053a:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <MX_CAN1_Init+0xb8>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <MX_CAN1_Init+0xb8>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000546:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <MX_CAN1_Init+0xb8>)
 8000548:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800054c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800054e:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <MX_CAN1_Init+0xb8>)
 8000550:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000554:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000556:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <MX_CAN1_Init+0xb8>)
 8000558:	2200      	movs	r2, #0
 800055a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <MX_CAN1_Init+0xb8>)
 800055e:	2200      	movs	r2, #0
 8000560:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000562:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <MX_CAN1_Init+0xb8>)
 8000564:	2200      	movs	r2, #0
 8000566:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000568:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <MX_CAN1_Init+0xb8>)
 800056a:	2200      	movs	r2, #0
 800056c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <MX_CAN1_Init+0xb8>)
 8000570:	2200      	movs	r2, #0
 8000572:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000574:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <MX_CAN1_Init+0xb8>)
 8000576:	2200      	movs	r2, #0
 8000578:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800057a:	4819      	ldr	r0, [pc, #100]	; (80005e0 <MX_CAN1_Init+0xb8>)
 800057c:	f000 fd68 	bl	8001050 <HAL_CAN_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000586:	f000 fb0f 	bl	8000ba8 <Error_Handler>
  }

  CAN_FilterTypeDef  sFilterConfig;

  /* Configure the CAN Filter */
  sFilterConfig.FilterBank = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000592:	2301      	movs	r3, #1
 8000594:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80005aa:	2301      	movs	r3, #1
 80005ac:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80005ae:	230e      	movs	r3, #14
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	4619      	mov	r1, r3
 80005b6:	480a      	ldr	r0, [pc, #40]	; (80005e0 <MX_CAN1_Init+0xb8>)
 80005b8:	f000 fe46 	bl	8001248 <HAL_CAN_ConfigFilter>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_CAN1_Init+0x9e>
  {
 	 /* Filter configuration Error */
 	 Error_Handler();
 80005c2:	f000 faf1 	bl	8000ba8 <Error_Handler>
  }

  /* Start the CAN peripheral */
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80005c6:	4806      	ldr	r0, [pc, #24]	; (80005e0 <MX_CAN1_Init+0xb8>)
 80005c8:	f000 ff1e 	bl	8001408 <HAL_CAN_Start>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_CAN1_Init+0xae>
  {
    /* Start Error */
    Error_Handler();
 80005d2:	f000 fae9 	bl	8000ba8 <Error_Handler>
  }


}
 80005d6:	bf00      	nop
 80005d8:	3728      	adds	r7, #40	; 0x28
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000c4 	.word	0x200000c4
 80005e4:	40006400 	.word	0x40006400

080005e8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80005ee:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <MX_CAN2_Init+0xb8>)
 80005f0:	4a2c      	ldr	r2, [pc, #176]	; (80006a4 <MX_CAN2_Init+0xbc>)
 80005f2:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 80005f4:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <MX_CAN2_Init+0xb8>)
 80005f6:	2202      	movs	r2, #2
 80005f8:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005fa:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <MX_CAN2_Init+0xb8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000600:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <MX_CAN2_Init+0xb8>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000606:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <MX_CAN2_Init+0xb8>)
 8000608:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800060c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <MX_CAN2_Init+0xb8>)
 8000610:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000614:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <MX_CAN2_Init+0xb8>)
 8000618:	2200      	movs	r2, #0
 800061a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <MX_CAN2_Init+0xb8>)
 800061e:	2200      	movs	r2, #0
 8000620:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_CAN2_Init+0xb8>)
 8000624:	2200      	movs	r2, #0
 8000626:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_CAN2_Init+0xb8>)
 800062a:	2200      	movs	r2, #0
 800062c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_CAN2_Init+0xb8>)
 8000630:	2200      	movs	r2, #0
 8000632:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_CAN2_Init+0xb8>)
 8000636:	2200      	movs	r2, #0
 8000638:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800063a:	4819      	ldr	r0, [pc, #100]	; (80006a0 <MX_CAN2_Init+0xb8>)
 800063c:	f000 fd08 	bl	8001050 <HAL_CAN_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000646:	f000 faaf 	bl	8000ba8 <Error_Handler>
  }

  CAN_FilterTypeDef  sFilterConfig;

  /* Configure the CAN Filter */
  sFilterConfig.FilterBank = 14;
 800064a:	230e      	movs	r3, #14
 800064c:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000652:	2301      	movs	r3, #1
 8000654:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000666:	2301      	movs	r3, #1
 8000668:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800066a:	2301      	movs	r3, #1
 800066c:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 800066e:	230e      	movs	r3, #14
 8000670:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8000672:	463b      	mov	r3, r7
 8000674:	4619      	mov	r1, r3
 8000676:	480a      	ldr	r0, [pc, #40]	; (80006a0 <MX_CAN2_Init+0xb8>)
 8000678:	f000 fde6 	bl	8001248 <HAL_CAN_ConfigFilter>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_CAN2_Init+0x9e>
  {
 	 /* Filter configuration Error */
 	 Error_Handler();
 8000682:	f000 fa91 	bl	8000ba8 <Error_Handler>
  }

  /* Start the CAN peripheral */
  if (HAL_CAN_Start(&hcan2) != HAL_OK)
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <MX_CAN2_Init+0xb8>)
 8000688:	f000 febe 	bl	8001408 <HAL_CAN_Start>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_CAN2_Init+0xae>
  {
    /* Start Error */
    Error_Handler();
 8000692:	f000 fa89 	bl	8000ba8 <Error_Handler>
  }


}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	; 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2000009c 	.word	0x2000009c
 80006a4:	40006800 	.word	0x40006800

080006a8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a47      	ldr	r2, [pc, #284]	; (80007e0 <HAL_CAN_MspInit+0x138>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d13b      	bne.n	8000740 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80006c8:	4b46      	ldr	r3, [pc, #280]	; (80007e4 <HAL_CAN_MspInit+0x13c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	4a45      	ldr	r2, [pc, #276]	; (80007e4 <HAL_CAN_MspInit+0x13c>)
 80006d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80006d2:	4b44      	ldr	r3, [pc, #272]	; (80007e4 <HAL_CAN_MspInit+0x13c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d10b      	bne.n	80006f2 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80006da:	4b43      	ldr	r3, [pc, #268]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	4a42      	ldr	r2, [pc, #264]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 80006e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006e4:	61d3      	str	r3, [r2, #28]
 80006e6:	4b40      	ldr	r3, [pc, #256]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006ee:	61fb      	str	r3, [r7, #28]
 80006f0:	69fb      	ldr	r3, [r7, #28]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	4a3c      	ldr	r2, [pc, #240]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6193      	str	r3, [r2, #24]
 80006fe:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	61bb      	str	r3, [r7, #24]
 8000708:	69bb      	ldr	r3, [r7, #24]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800070a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800070e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4619      	mov	r1, r3
 800071e:	4833      	ldr	r0, [pc, #204]	; (80007ec <HAL_CAN_MspInit+0x144>)
 8000720:	f001 f9ac 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	4619      	mov	r1, r3
 8000738:	482c      	ldr	r0, [pc, #176]	; (80007ec <HAL_CAN_MspInit+0x144>)
 800073a:	f001 f99f 	bl	8001a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800073e:	e04b      	b.n	80007d8 <HAL_CAN_MspInit+0x130>
  else if(canHandle->Instance==CAN2)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <HAL_CAN_MspInit+0x148>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d146      	bne.n	80007d8 <HAL_CAN_MspInit+0x130>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a26      	ldr	r2, [pc, #152]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 8000750:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <HAL_CAN_MspInit+0x13c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <HAL_CAN_MspInit+0x13c>)
 800076a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <HAL_CAN_MspInit+0x13c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d10b      	bne.n	800078c <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	4a1b      	ldr	r2, [pc, #108]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 800077a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800077e:	61d3      	str	r3, [r2, #28]
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <HAL_CAN_MspInit+0x140>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0308 	and.w	r3, r3, #8
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	4619      	mov	r1, r3
 80007b8:	480e      	ldr	r0, [pc, #56]	; (80007f4 <HAL_CAN_MspInit+0x14c>)
 80007ba:	f001 f95f 	bl	8001a7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	4619      	mov	r1, r3
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <HAL_CAN_MspInit+0x14c>)
 80007d4:	f001 f952 	bl	8001a7c <HAL_GPIO_Init>
}
 80007d8:	bf00      	nop
 80007da:	3730      	adds	r7, #48	; 0x30
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40006400 	.word	0x40006400
 80007e4:	2000008c 	.word	0x2000008c
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010800 	.word	0x40010800
 80007f0:	40006800 	.word	0x40006800
 80007f4:	40010c00 	.word	0x40010c00

080007f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080c:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <MX_GPIO_Init+0xcc>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a2c      	ldr	r2, [pc, #176]	; (80008c4 <MX_GPIO_Init+0xcc>)
 8000812:	f043 0310 	orr.w	r3, r3, #16
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <MX_GPIO_Init+0xcc>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0310 	and.w	r3, r3, #16
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MX_GPIO_Init+0xcc>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a26      	ldr	r2, [pc, #152]	; (80008c4 <MX_GPIO_Init+0xcc>)
 800082a:	f043 0320 	orr.w	r3, r3, #32
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MX_GPIO_Init+0xcc>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0320 	and.w	r3, r3, #32
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083c:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <MX_GPIO_Init+0xcc>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a20      	ldr	r2, [pc, #128]	; (80008c4 <MX_GPIO_Init+0xcc>)
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_GPIO_Init+0xcc>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0308 	and.w	r3, r3, #8
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_GPIO_Init+0xcc>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a1a      	ldr	r2, [pc, #104]	; (80008c4 <MX_GPIO_Init+0xcc>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_GPIO_Init+0xcc>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDO_Pin|LEDB_Pin|LEDG_Pin|LEDR_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	210f      	movs	r1, #15
 8000870:	4815      	ldr	r0, [pc, #84]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000872:	f001 fa5d 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDCAN1_Pin|LEDCAN2_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 7140 	mov.w	r1, #768	; 0x300
 800087c:	4813      	ldr	r0, [pc, #76]	; (80008cc <MX_GPIO_Init+0xd4>)
 800087e:	f001 fa57 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LEDO_Pin|LEDB_Pin|LEDG_Pin|LEDR_Pin;
 8000882:	230f      	movs	r3, #15
 8000884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2302      	movs	r3, #2
 8000890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	4619      	mov	r1, r3
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <MX_GPIO_Init+0xd0>)
 800089a:	f001 f8ef 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LEDCAN1_Pin|LEDCAN2_Pin;
 800089e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_GPIO_Init+0xd4>)
 80008b8:	f001 f8e0 	bl	8001a7c <HAL_GPIO_Init>

}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40011000 	.word	0x40011000
 80008cc:	40010c00 	.word	0x40010c00

080008d0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80008d8:	1d39      	adds	r1, r7, #4
 80008da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008de:	2201      	movs	r2, #1
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <__io_putchar+0x20>)
 80008e2:	f001 ffae 	bl	8002842 <HAL_UART_Transmit>

  return ch;
 80008e6:	687b      	ldr	r3, [r7, #4]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200001bc 	.word	0x200001bc

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fa:	f000 fb25 	bl	8000f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fe:	f000 f911 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000902:	f7ff ff79 	bl	80007f8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000906:	f7ff fe0f 	bl	8000528 <MX_CAN1_Init>
  MX_CAN2_Init();
 800090a:	f7ff fe6d 	bl	80005e8 <MX_CAN2_Init>
  MX_USART1_UART_Init();
 800090e:	f000 fa81 	bl	8000e14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_CAN_Start(&hcan1);
  uint8_t count = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	71fb      	strb	r3, [r7, #7]

  /* Output a message on Hyperterminal using printf function */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 8000916:	486d      	ldr	r0, [pc, #436]	; (8000acc <main+0x1d8>)
 8000918:	f002 f95e 	bl	8002bd8 <iprintf>
  printf("** Test finished successfully. ** \n\r");
 800091c:	486c      	ldr	r0, [pc, #432]	; (8000ad0 <main+0x1dc>)
 800091e:	f002 f95b 	bl	8002bd8 <iprintf>

  /* Configure Transmission process */
  TxHeader1.StdId = 0x321;
 8000922:	4b6c      	ldr	r3, [pc, #432]	; (8000ad4 <main+0x1e0>)
 8000924:	f240 3221 	movw	r2, #801	; 0x321
 8000928:	601a      	str	r2, [r3, #0]
  TxHeader1.ExtId = 0x01;
 800092a:	4b6a      	ldr	r3, [pc, #424]	; (8000ad4 <main+0x1e0>)
 800092c:	2201      	movs	r2, #1
 800092e:	605a      	str	r2, [r3, #4]
  TxHeader1.RTR = CAN_RTR_DATA;
 8000930:	4b68      	ldr	r3, [pc, #416]	; (8000ad4 <main+0x1e0>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  TxHeader1.IDE = CAN_ID_STD;
 8000936:	4b67      	ldr	r3, [pc, #412]	; (8000ad4 <main+0x1e0>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  TxHeader1.DLC = 2;
 800093c:	4b65      	ldr	r3, [pc, #404]	; (8000ad4 <main+0x1e0>)
 800093e:	2202      	movs	r2, #2
 8000940:	611a      	str	r2, [r3, #16]
  TxHeader1.TransmitGlobalTime = DISABLE;
 8000942:	4b64      	ldr	r3, [pc, #400]	; (8000ad4 <main+0x1e0>)
 8000944:	2200      	movs	r2, #0
 8000946:	751a      	strb	r2, [r3, #20]

  /* Configure Transmission process */
  TxHeader2.StdId = 0x322;
 8000948:	4b63      	ldr	r3, [pc, #396]	; (8000ad8 <main+0x1e4>)
 800094a:	f240 3222 	movw	r2, #802	; 0x322
 800094e:	601a      	str	r2, [r3, #0]
  TxHeader2.ExtId = 0x01;
 8000950:	4b61      	ldr	r3, [pc, #388]	; (8000ad8 <main+0x1e4>)
 8000952:	2201      	movs	r2, #1
 8000954:	605a      	str	r2, [r3, #4]
  TxHeader2.RTR = CAN_RTR_DATA;
 8000956:	4b60      	ldr	r3, [pc, #384]	; (8000ad8 <main+0x1e4>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  TxHeader2.IDE = CAN_ID_STD;
 800095c:	4b5e      	ldr	r3, [pc, #376]	; (8000ad8 <main+0x1e4>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  TxHeader2.DLC = 2;
 8000962:	4b5d      	ldr	r3, [pc, #372]	; (8000ad8 <main+0x1e4>)
 8000964:	2202      	movs	r2, #2
 8000966:	611a      	str	r2, [r3, #16]
  TxHeader2.TransmitGlobalTime = DISABLE;
 8000968:	4b5b      	ldr	r3, [pc, #364]	; (8000ad8 <main+0x1e4>)
 800096a:	2200      	movs	r2, #0
 800096c:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LEDR_GPIO_Port,LEDR_Pin); //Toggle LED
 800096e:	2108      	movs	r1, #8
 8000970:	485a      	ldr	r0, [pc, #360]	; (8000adc <main+0x1e8>)
 8000972:	f001 f9f5 	bl	8001d60 <HAL_GPIO_TogglePin>

	  HAL_Delay(250); //Delay 1 Seconds
 8000976:	20fa      	movs	r0, #250	; 0xfa
 8000978:	f000 fb48 	bl	800100c <HAL_Delay>

	  HAL_GPIO_TogglePin(LEDG_GPIO_Port,LEDG_Pin); //Toggle LED
 800097c:	2104      	movs	r1, #4
 800097e:	4857      	ldr	r0, [pc, #348]	; (8000adc <main+0x1e8>)
 8000980:	f001 f9ee 	bl	8001d60 <HAL_GPIO_TogglePin>

	  HAL_Delay(250); //Delay 1 Seconds
 8000984:	20fa      	movs	r0, #250	; 0xfa
 8000986:	f000 fb41 	bl	800100c <HAL_Delay>

	  HAL_GPIO_TogglePin(LEDB_GPIO_Port,LEDB_Pin); //Toggle LED
 800098a:	2102      	movs	r1, #2
 800098c:	4853      	ldr	r0, [pc, #332]	; (8000adc <main+0x1e8>)
 800098e:	f001 f9e7 	bl	8001d60 <HAL_GPIO_TogglePin>

	  HAL_Delay(250); //Delay 1 Seconds
 8000992:	20fa      	movs	r0, #250	; 0xfa
 8000994:	f000 fb3a 	bl	800100c <HAL_Delay>

	  HAL_GPIO_TogglePin(LEDO_GPIO_Port,LEDO_Pin); //Toggle LED
 8000998:	2101      	movs	r1, #1
 800099a:	4850      	ldr	r0, [pc, #320]	; (8000adc <main+0x1e8>)
 800099c:	f001 f9e0 	bl	8001d60 <HAL_GPIO_TogglePin>

	  HAL_Delay(250); //Delay 1 Seconds
 80009a0:	20fa      	movs	r0, #250	; 0xfa
 80009a2:	f000 fb33 	bl	800100c <HAL_Delay>
//
//	  HAL_GPIO_TogglePin(LEDCAN2_GPIO_Port,LEDCAN2_Pin); //Toggle LED
//
//	  HAL_Delay(250); //Delay 1 Seconds

	  TxData1[0] = 0xBE;
 80009a6:	4b4e      	ldr	r3, [pc, #312]	; (8000ae0 <main+0x1ec>)
 80009a8:	22be      	movs	r2, #190	; 0xbe
 80009aa:	701a      	strb	r2, [r3, #0]
	  TxData1[1] = count++;
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	71fa      	strb	r2, [r7, #7]
 80009b2:	4a4b      	ldr	r2, [pc, #300]	; (8000ae0 <main+0x1ec>)
 80009b4:	7053      	strb	r3, [r2, #1]

	  TxData2[0] = 0xEF;
 80009b6:	4b4b      	ldr	r3, [pc, #300]	; (8000ae4 <main+0x1f0>)
 80009b8:	22ef      	movs	r2, #239	; 0xef
 80009ba:	701a      	strb	r2, [r3, #0]
	  TxData2[1] = count++;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	71fa      	strb	r2, [r7, #7]
 80009c2:	4a48      	ldr	r2, [pc, #288]	; (8000ae4 <main+0x1f0>)
 80009c4:	7053      	strb	r3, [r2, #1]

	  HAL_GPIO_TogglePin(LEDCAN1_GPIO_Port,LEDCAN1_Pin);
 80009c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ca:	4847      	ldr	r0, [pc, #284]	; (8000ae8 <main+0x1f4>)
 80009cc:	f001 f9c8 	bl	8001d60 <HAL_GPIO_TogglePin>
      /* Start the Transmission process */
      if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox1) != HAL_OK)
 80009d0:	4b46      	ldr	r3, [pc, #280]	; (8000aec <main+0x1f8>)
 80009d2:	4a43      	ldr	r2, [pc, #268]	; (8000ae0 <main+0x1ec>)
 80009d4:	493f      	ldr	r1, [pc, #252]	; (8000ad4 <main+0x1e0>)
 80009d6:	4846      	ldr	r0, [pc, #280]	; (8000af0 <main+0x1fc>)
 80009d8:	f000 fd5a 	bl	8001490 <HAL_CAN_AddTxMessage>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <main+0xf2>
      {
        /* Transmission request Error */
        Error_Handler();
 80009e2:	f000 f8e1 	bl	8000ba8 <Error_Handler>
      }
      printf("\n\r TxData1: %x - %x \n\r", TxData1[0], TxData1[1]);
 80009e6:	4b3e      	ldr	r3, [pc, #248]	; (8000ae0 <main+0x1ec>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4619      	mov	r1, r3
 80009ec:	4b3c      	ldr	r3, [pc, #240]	; (8000ae0 <main+0x1ec>)
 80009ee:	785b      	ldrb	r3, [r3, #1]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4840      	ldr	r0, [pc, #256]	; (8000af4 <main+0x200>)
 80009f4:	f002 f8f0 	bl	8002bd8 <iprintf>

      HAL_GPIO_TogglePin(LEDCAN1_GPIO_Port,LEDCAN1_Pin);
 80009f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009fc:	483a      	ldr	r0, [pc, #232]	; (8000ae8 <main+0x1f4>)
 80009fe:	f001 f9af 	bl	8001d60 <HAL_GPIO_TogglePin>

      HAL_Delay(10);
 8000a02:	200a      	movs	r0, #10
 8000a04:	f000 fb02 	bl	800100c <HAL_Delay>

	  HAL_GPIO_TogglePin(LEDCAN2_GPIO_Port,LEDCAN2_Pin);
 8000a08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0c:	4836      	ldr	r0, [pc, #216]	; (8000ae8 <main+0x1f4>)
 8000a0e:	f001 f9a7 	bl	8001d60 <HAL_GPIO_TogglePin>
      /* Start the Transmission process */
      if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData2, &TxMailbox2) != HAL_OK)
 8000a12:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <main+0x204>)
 8000a14:	4a33      	ldr	r2, [pc, #204]	; (8000ae4 <main+0x1f0>)
 8000a16:	4930      	ldr	r1, [pc, #192]	; (8000ad8 <main+0x1e4>)
 8000a18:	4838      	ldr	r0, [pc, #224]	; (8000afc <main+0x208>)
 8000a1a:	f000 fd39 	bl	8001490 <HAL_CAN_AddTxMessage>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <main+0x134>
      {
        /* Transmission request Error */
        Error_Handler();
 8000a24:	f000 f8c0 	bl	8000ba8 <Error_Handler>
      }
 	  printf("\n\r TxData2: %x - %x \n\r", TxData2[0], TxData2[1]);
 8000a28:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <main+0x1f0>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <main+0x1f0>)
 8000a30:	785b      	ldrb	r3, [r3, #1]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4832      	ldr	r0, [pc, #200]	; (8000b00 <main+0x20c>)
 8000a36:	f002 f8cf 	bl	8002bd8 <iprintf>

      HAL_GPIO_TogglePin(LEDCAN2_GPIO_Port,LEDCAN2_Pin);
 8000a3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a3e:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <main+0x1f4>)
 8000a40:	f001 f98e 	bl	8001d60 <HAL_GPIO_TogglePin>

      HAL_Delay(10);
 8000a44:	200a      	movs	r0, #10
 8000a46:	f000 fae1 	bl	800100c <HAL_Delay>

      /* Receive */
      if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0){
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4828      	ldr	r0, [pc, #160]	; (8000af0 <main+0x1fc>)
 8000a4e:	f000 ff0a 	bl	8001866 <HAL_CAN_GetRxFifoFillLevel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d017      	beq.n	8000a88 <main+0x194>
		 if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <main+0x210>)
 8000a5a:	4a2b      	ldr	r2, [pc, #172]	; (8000b08 <main+0x214>)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4824      	ldr	r0, [pc, #144]	; (8000af0 <main+0x1fc>)
 8000a60:	f000 fdf0 	bl	8001644 <HAL_CAN_GetRxMessage>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d004      	beq.n	8000a74 <main+0x180>
		 {
		   /* Reception Error */
		   Error_Handler();
 8000a6a:	f000 f89d 	bl	8000ba8 <Error_Handler>
		   printf("CAN1 RX: Error!");
 8000a6e:	4827      	ldr	r0, [pc, #156]	; (8000b0c <main+0x218>)
 8000a70:	f002 f8b2 	bl	8002bd8 <iprintf>

		 }
		 printf("CAN1 RX: %lx:%x%x \n\r", RxHeader1.StdId, RxData1[0], RxData1[1]);
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <main+0x214>)
 8000a76:	6819      	ldr	r1, [r3, #0]
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <main+0x210>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <main+0x210>)
 8000a80:	785b      	ldrb	r3, [r3, #1]
 8000a82:	4823      	ldr	r0, [pc, #140]	; (8000b10 <main+0x21c>)
 8000a84:	f002 f8a8 	bl	8002bd8 <iprintf>

      }

      if (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO1) != 0){
 8000a88:	2101      	movs	r1, #1
 8000a8a:	481c      	ldr	r0, [pc, #112]	; (8000afc <main+0x208>)
 8000a8c:	f000 feeb 	bl	8001866 <HAL_CAN_GetRxFifoFillLevel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f43f af6b 	beq.w	800096e <main+0x7a>
		 if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO1, &RxHeader2, RxData2) != HAL_OK)
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <main+0x220>)
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <main+0x224>)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4817      	ldr	r0, [pc, #92]	; (8000afc <main+0x208>)
 8000aa0:	f000 fdd0 	bl	8001644 <HAL_CAN_GetRxMessage>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d004      	beq.n	8000ab4 <main+0x1c0>
		 {
		   /* Reception Error */
		   Error_Handler();
 8000aaa:	f000 f87d 	bl	8000ba8 <Error_Handler>
		   printf("CAN2 RX: Error!");
 8000aae:	481b      	ldr	r0, [pc, #108]	; (8000b1c <main+0x228>)
 8000ab0:	f002 f892 	bl	8002bd8 <iprintf>
		 }
		 printf("CAN2 RX: %lx:%x%x \n\r", RxHeader2.StdId, RxData2[0], RxData2[1]);
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <main+0x224>)
 8000ab6:	6819      	ldr	r1, [r3, #0]
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <main+0x220>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <main+0x220>)
 8000ac0:	785b      	ldrb	r3, [r3, #1]
 8000ac2:	4817      	ldr	r0, [pc, #92]	; (8000b20 <main+0x22c>)
 8000ac4:	f002 f888 	bl	8002bd8 <iprintf>
	  HAL_GPIO_TogglePin(LEDR_GPIO_Port,LEDR_Pin); //Toggle LED
 8000ac8:	e751      	b.n	800096e <main+0x7a>
 8000aca:	bf00      	nop
 8000acc:	080039cc 	.word	0x080039cc
 8000ad0:	08003a1c 	.word	0x08003a1c
 8000ad4:	20000168 	.word	0x20000168
 8000ad8:	200000ec 	.word	0x200000ec
 8000adc:	40011000 	.word	0x40011000
 8000ae0:	20000180 	.word	0x20000180
 8000ae4:	200001a8 	.word	0x200001a8
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	200001b0 	.word	0x200001b0
 8000af0:	200000c4 	.word	0x200000c4
 8000af4:	08003a44 	.word	0x08003a44
 8000af8:	200001a4 	.word	0x200001a4
 8000afc:	2000009c 	.word	0x2000009c
 8000b00:	08003a5c 	.word	0x08003a5c
 8000b04:	200001b4 	.word	0x200001b4
 8000b08:	2000010c 	.word	0x2000010c
 8000b0c:	08003a74 	.word	0x08003a74
 8000b10:	08003a84 	.word	0x08003a84
 8000b14:	20000104 	.word	0x20000104
 8000b18:	20000188 	.word	0x20000188
 8000b1c:	08003a9c 	.word	0x08003a9c
 8000b20:	08003aac 	.word	0x08003aac

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b094      	sub	sp, #80	; 0x50
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0318 	add.w	r3, r7, #24
 8000b2e:	2238      	movs	r2, #56	; 0x38
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 f848 	bl	8002bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5a:	f107 0318 	add.w	r3, r7, #24
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 f916 	bl	8001d90 <HAL_RCC_OscConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000b6a:	f000 f81d 	bl	8000ba8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6e:	230f      	movs	r3, #15
 8000b70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 fc18 	bl	80023bc <HAL_RCC_ClockConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b92:	f000 f809 	bl	8000ba8 <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000b96:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <SystemClock_Config+0x80>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	3750      	adds	r7, #80	; 0x50
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	42420070 	.word	0x42420070

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_MspInit+0x5c>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <HAL_MspInit+0x5c>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_MspInit+0x5c>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_MspInit+0x5c>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <HAL_MspInit+0x5c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	61d3      	str	r3, [r2, #28]
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <HAL_MspInit+0x5c>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_MspInit+0x60>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_MspInit+0x60>)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <MemManage_Handler+0x4>

08000c30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <BusFault_Handler+0x4>

08000c36 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <UsageFault_Handler+0x4>

08000c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 f9b6 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e00a      	b.n	8000c94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c7e:	f3af 8000 	nop.w
 8000c82:	4601      	mov	r1, r0
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	b2ca      	uxtb	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf0      	blt.n	8000c7e <_read+0x12>
	}

return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e009      	b.n	8000ccc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fe05 	bl	80008d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf1      	blt.n	8000cb8 <_write+0x12>
	}
	return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_close>:

int _close(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d04:	605a      	str	r2, [r3, #4]
	return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <_isatty>:

int _isatty(int file)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
	return 1;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b085      	sub	sp, #20
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
	return 0;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
	...

08000d40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x50>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x16>
		heap_end = &end;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <_sbrk+0x50>)
 8000d52:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <_sbrk+0x54>)
 8000d54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <_sbrk+0x50>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <_sbrk+0x50>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	466a      	mov	r2, sp
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d907      	bls.n	8000d7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d6a:	f001 ff27 	bl	8002bbc <__errno>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	230c      	movs	r3, #12
 8000d72:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
 8000d78:	e006      	b.n	8000d88 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <_sbrk+0x50>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <_sbrk+0x50>)
 8000d84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000090 	.word	0x20000090
 8000d94:	20000208 	.word	0x20000208

08000d98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <SystemInit+0x70>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <SystemInit+0x70>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <SystemInit+0x70>)
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	4916      	ldr	r1, [pc, #88]	; (8000e08 <SystemInit+0x70>)
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <SystemInit+0x74>)
 8000db0:	4013      	ands	r3, r2
 8000db2:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <SystemInit+0x70>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <SystemInit+0x70>)
 8000dba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <SystemInit+0x70>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <SystemInit+0x70>)
 8000dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <SystemInit+0x70>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	; (8000e08 <SystemInit+0x70>)
 8000dd6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000dda:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <SystemInit+0x70>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <SystemInit+0x70>)
 8000de2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8000de6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <SystemInit+0x70>)
 8000dea:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000dee:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SystemInit+0x70>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <SystemInit+0x78>)
 8000df8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dfc:	609a      	str	r2, [r3, #8]
#endif 
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	f0ff0000 	.word	0xf0ff0000
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <MX_USART1_UART_Init+0x50>)
 8000e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e4c:	f001 fcac 	bl	80027a8 <HAL_UART_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e56:	f7ff fea7 	bl	8000ba8 <Error_Handler>
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200001bc 	.word	0x200001bc
 8000e64:	40013800 	.word	0x40013800

08000e68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <HAL_UART_MspInit+0x8c>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d131      	bne.n	8000eec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <HAL_UART_MspInit+0x90>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <HAL_UART_MspInit+0x90>)
 8000e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_UART_MspInit+0x90>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_UART_MspInit+0x90>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <HAL_UART_MspInit+0x90>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_UART_MspInit+0x90>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ebc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <HAL_UART_MspInit+0x94>)
 8000ece:	f000 fdd5 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_UART_MspInit+0x94>)
 8000ee8:	f000 fdc8 	bl	8001a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000eec:	bf00      	nop
 8000eee:	3720      	adds	r7, #32
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40013800 	.word	0x40013800
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010800 	.word	0x40010800

08000f00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f02:	e003      	b.n	8000f0c <LoopCopyDataInit>

08000f04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8000f06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f0a:	3104      	adds	r1, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8000f10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f14:	d3f6      	bcc.n	8000f04 <CopyDataInit>
  ldr r2, =_sbss
 8000f16:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8000f18:	e002      	b.n	8000f20 <LoopFillZerobss>

08000f1a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f1c:	f842 3b04 	str.w	r3, [r2], #4

08000f20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8000f22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f24:	d3f9      	bcc.n	8000f1a <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f26:	f7ff ff37 	bl	8000d98 <SystemInit>
/* Call the application's entry point.*/
  bl main
 8000f2a:	f7ff fce3 	bl	80008f4 <main>
  bx lr
 8000f2e:	4770      	bx	lr
  ldr r3, =_sidata
 8000f30:	08003ba4 	.word	0x08003ba4
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f38:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000f3c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000f40:	20000204 	.word	0x20000204

08000f44 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC1_2_IRQHandler>
	...

08000f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_Init+0x28>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_Init+0x28>)
 8000f52:	f043 0310 	orr.w	r3, r3, #16
 8000f56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 fd5b 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 f808 	bl	8000f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f64:	f7ff fe26 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40022000 	.word	0x40022000

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x54>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x58>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fd65 	bl	8001a62 <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 fd3b 	bl	8001a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_InitTick+0x5c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x1c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a03      	ldr	r2, [pc, #12]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	200001fc 	.word	0x200001fc

08000ff8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <HAL_GetTick+0x10>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	200001fc 	.word	0x200001fc

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff fff0 	bl	8000ff8 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_Delay+0x40>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffe0 	bl	8000ff8 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000008 	.word	0x20000008

08001050 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e0ed      	b.n	800123e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d102      	bne.n	8001074 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff fb1a 	bl	80006a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0202 	bic.w	r2, r2, #2
 8001082:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001084:	f7ff ffb8 	bl	8000ff8 <HAL_GetTick>
 8001088:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800108a:	e012      	b.n	80010b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800108c:	f7ff ffb4 	bl	8000ff8 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b0a      	cmp	r3, #10
 8001098:	d90b      	bls.n	80010b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2205      	movs	r2, #5
 80010aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e0c5      	b.n	800123e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1e5      	bne.n	800108c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0201 	orr.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010d0:	f7ff ff92 	bl	8000ff8 <HAL_GetTick>
 80010d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010d6:	e012      	b.n	80010fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010d8:	f7ff ff8e 	bl	8000ff8 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b0a      	cmp	r3, #10
 80010e4:	d90b      	bls.n	80010fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2205      	movs	r2, #5
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e09f      	b.n	800123e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0e5      	beq.n	80010d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7e1b      	ldrb	r3, [r3, #24]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d108      	bne.n	8001126 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e007      	b.n	8001136 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7e5b      	ldrb	r3, [r3, #25]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d108      	bne.n	8001150 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e007      	b.n	8001160 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800115e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7e9b      	ldrb	r3, [r3, #26]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d108      	bne.n	800117a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0220 	orr.w	r2, r2, #32
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	e007      	b.n	800118a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0220 	bic.w	r2, r2, #32
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7edb      	ldrb	r3, [r3, #27]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d108      	bne.n	80011a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0210 	bic.w	r2, r2, #16
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e007      	b.n	80011b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0210 	orr.w	r2, r2, #16
 80011b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7f1b      	ldrb	r3, [r3, #28]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d108      	bne.n	80011ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0208 	orr.w	r2, r2, #8
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e007      	b.n	80011de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0208 	bic.w	r2, r2, #8
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7f5b      	ldrb	r3, [r3, #29]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d108      	bne.n	80011f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f042 0204 	orr.w	r2, r2, #4
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e007      	b.n	8001208 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0204 	bic.w	r2, r2, #4
 8001206:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	ea42 0103 	orr.w	r1, r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800125e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001260:	7cfb      	ldrb	r3, [r7, #19]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d003      	beq.n	800126e <HAL_CAN_ConfigFilter+0x26>
 8001266:	7cfb      	ldrb	r3, [r7, #19]
 8001268:	2b02      	cmp	r3, #2
 800126a:	f040 80be 	bne.w	80013ea <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800126e:	4b65      	ldr	r3, [pc, #404]	; (8001404 <HAL_CAN_ConfigFilter+0x1bc>)
 8001270:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001278:	f043 0201 	orr.w	r2, r3, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001288:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	431a      	orrs	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f003 031f 	and.w	r3, r3, #31
 80012ae:	2201      	movs	r2, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43db      	mvns	r3, r3
 80012c0:	401a      	ands	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d123      	bne.n	8001318 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3248      	adds	r2, #72	; 0x48
 80012f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800130c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800130e:	6979      	ldr	r1, [r7, #20]
 8001310:	3348      	adds	r3, #72	; 0x48
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d122      	bne.n	8001366 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	431a      	orrs	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001340:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3248      	adds	r2, #72	; 0x48
 8001346:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800135a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800135c:	6979      	ldr	r1, [r7, #20]
 800135e:	3348      	adds	r3, #72	; 0x48
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	440b      	add	r3, r1
 8001364:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d109      	bne.n	8001382 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43db      	mvns	r3, r3
 8001378:	401a      	ands	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001380:	e007      	b.n	8001392 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	431a      	orrs	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d109      	bne.n	80013ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	401a      	ands	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013ac:	e007      	b.n	80013be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d107      	bne.n	80013d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013dc:	f023 0201 	bic.w	r2, r3, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e006      	b.n	80013f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
  }
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40006400 	.word	0x40006400

08001408 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d12e      	bne.n	800147a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2202      	movs	r2, #2
 8001420:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001434:	f7ff fde0 	bl	8000ff8 <HAL_GetTick>
 8001438:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800143a:	e012      	b.n	8001462 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800143c:	f7ff fddc 	bl	8000ff8 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b0a      	cmp	r3, #10
 8001448:	d90b      	bls.n	8001462 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2205      	movs	r2, #5
 800145a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e012      	b.n	8001488 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1e5      	bne.n	800143c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	e006      	b.n	8001488 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
  }
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ae:	7ffb      	ldrb	r3, [r7, #31]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d003      	beq.n	80014bc <HAL_CAN_AddTxMessage+0x2c>
 80014b4:	7ffb      	ldrb	r3, [r7, #31]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	f040 80b8 	bne.w	800162c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10a      	bne.n	80014dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d105      	bne.n	80014dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80a0 	beq.w	800161c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	0e1b      	lsrs	r3, r3, #24
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d907      	bls.n	80014fc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e09e      	b.n	800163a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014fc:	2201      	movs	r2, #1
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	409a      	lsls	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10d      	bne.n	800152a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001518:	68f9      	ldr	r1, [r7, #12]
 800151a:	6809      	ldr	r1, [r1, #0]
 800151c:	431a      	orrs	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3318      	adds	r3, #24
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	440b      	add	r3, r1
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e00f      	b.n	800154a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001534:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800153a:	68f9      	ldr	r1, [r7, #12]
 800153c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800153e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3318      	adds	r3, #24
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	440b      	add	r3, r1
 8001548:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3318      	adds	r3, #24
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	440b      	add	r3, r1
 800155a:	3304      	adds	r3, #4
 800155c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	7d1b      	ldrb	r3, [r3, #20]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d111      	bne.n	800158a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3318      	adds	r3, #24
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	4413      	add	r3, r2
 8001572:	3304      	adds	r3, #4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	6811      	ldr	r1, [r2, #0]
 800157a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3318      	adds	r3, #24
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	440b      	add	r3, r1
 8001586:	3304      	adds	r3, #4
 8001588:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3307      	adds	r3, #7
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	061a      	lsls	r2, r3, #24
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3306      	adds	r3, #6
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	041b      	lsls	r3, r3, #16
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3305      	adds	r3, #5
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	4313      	orrs	r3, r2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	3204      	adds	r2, #4
 80015aa:	7812      	ldrb	r2, [r2, #0]
 80015ac:	4610      	mov	r0, r2
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	6811      	ldr	r1, [r2, #0]
 80015b2:	ea43 0200 	orr.w	r2, r3, r0
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	440b      	add	r3, r1
 80015bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3303      	adds	r3, #3
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	061a      	lsls	r2, r3, #24
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3302      	adds	r3, #2
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3301      	adds	r3, #1
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	4313      	orrs	r3, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	7812      	ldrb	r2, [r2, #0]
 80015e2:	4610      	mov	r0, r2
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	6811      	ldr	r1, [r2, #0]
 80015e8:	ea43 0200 	orr.w	r2, r3, r0
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	440b      	add	r3, r1
 80015f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80015f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3318      	adds	r3, #24
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	4413      	add	r3, r2
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	6811      	ldr	r1, [r2, #0]
 800160a:	f043 0201 	orr.w	r2, r3, #1
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3318      	adds	r3, #24
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	440b      	add	r3, r1
 8001616:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	e00e      	b.n	800163a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e006      	b.n	800163a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
  }
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001658:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d003      	beq.n	8001668 <HAL_CAN_GetRxMessage+0x24>
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	2b02      	cmp	r3, #2
 8001664:	f040 80f3 	bne.w	800184e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10e      	bne.n	800168c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d116      	bne.n	80016aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0e7      	b.n	800185c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d107      	bne.n	80016aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e0d8      	b.n	800185c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	331b      	adds	r3, #27
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	4413      	add	r3, r2
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0204 	and.w	r2, r3, #4
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10c      	bne.n	80016e2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	331b      	adds	r3, #27
 80016d0:	011b      	lsls	r3, r3, #4
 80016d2:	4413      	add	r3, r2
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	0d5b      	lsrs	r3, r3, #21
 80016d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e00b      	b.n	80016fa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	331b      	adds	r3, #27
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	4413      	add	r3, r2
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	08db      	lsrs	r3, r3, #3
 80016f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	331b      	adds	r3, #27
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	4413      	add	r3, r2
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0202 	and.w	r2, r3, #2
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	331b      	adds	r3, #27
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	4413      	add	r3, r2
 800171c:	3304      	adds	r3, #4
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 020f 	and.w	r2, r3, #15
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	331b      	adds	r3, #27
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	4413      	add	r3, r2
 8001734:	3304      	adds	r3, #4
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	b2da      	uxtb	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	331b      	adds	r3, #27
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	4413      	add	r3, r2
 800174c:	3304      	adds	r3, #4
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	b29a      	uxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	4413      	add	r3, r2
 8001762:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	0a1a      	lsrs	r2, r3, #8
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	4413      	add	r3, r2
 8001792:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0c1a      	lsrs	r2, r3, #16
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	3302      	adds	r3, #2
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0e1a      	lsrs	r2, r3, #24
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	3303      	adds	r3, #3
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	3304      	adds	r3, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	4413      	add	r3, r2
 80017de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0a1a      	lsrs	r2, r3, #8
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	3305      	adds	r3, #5
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	0c1a      	lsrs	r2, r3, #16
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	3306      	adds	r3, #6
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	4413      	add	r3, r2
 8001812:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0e1a      	lsrs	r2, r3, #24
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	3307      	adds	r3, #7
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d108      	bne.n	800183a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0220 	orr.w	r2, r2, #32
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	e007      	b.n	800184a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0220 	orr.w	r2, r2, #32
 8001848:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e006      	b.n	800185c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
  }
}
 800185c:	4618      	mov	r0, r3
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr

08001866 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800187c:	7afb      	ldrb	r3, [r7, #11]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d002      	beq.n	8001888 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001882:	7afb      	ldrb	r3, [r7, #11]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d10f      	bne.n	80018a8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	e005      	b.n	80018a8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80018a8:	68fb      	ldr	r3, [r7, #12]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d0:	4013      	ands	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <__NVIC_GetPriorityGrouping+0x18>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	f003 0307 	and.w	r3, r3, #7
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	; (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff90 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff49 	bl	80018b4 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff5e 	bl	80018fc <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff90 	bl	800196c <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5f 	bl	8001918 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffb0 	bl	80019d0 <SysTick_Config>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b08b      	sub	sp, #44	; 0x2c
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8e:	e127      	b.n	8001ce0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a90:	2201      	movs	r2, #1
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	f040 8116 	bne.w	8001cda <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d034      	beq.n	8001b20 <HAL_GPIO_Init+0xa4>
 8001ab6:	2b12      	cmp	r3, #18
 8001ab8:	d80d      	bhi.n	8001ad6 <HAL_GPIO_Init+0x5a>
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d02b      	beq.n	8001b16 <HAL_GPIO_Init+0x9a>
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d804      	bhi.n	8001acc <HAL_GPIO_Init+0x50>
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d031      	beq.n	8001b2a <HAL_GPIO_Init+0xae>
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d01c      	beq.n	8001b04 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aca:	e048      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d043      	beq.n	8001b58 <HAL_GPIO_Init+0xdc>
 8001ad0:	2b11      	cmp	r3, #17
 8001ad2:	d01b      	beq.n	8001b0c <HAL_GPIO_Init+0x90>
          break;
 8001ad4:	e043      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ad6:	4a89      	ldr	r2, [pc, #548]	; (8001cfc <HAL_GPIO_Init+0x280>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d026      	beq.n	8001b2a <HAL_GPIO_Init+0xae>
 8001adc:	4a87      	ldr	r2, [pc, #540]	; (8001cfc <HAL_GPIO_Init+0x280>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d806      	bhi.n	8001af0 <HAL_GPIO_Init+0x74>
 8001ae2:	4a87      	ldr	r2, [pc, #540]	; (8001d00 <HAL_GPIO_Init+0x284>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d020      	beq.n	8001b2a <HAL_GPIO_Init+0xae>
 8001ae8:	4a86      	ldr	r2, [pc, #536]	; (8001d04 <HAL_GPIO_Init+0x288>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d01d      	beq.n	8001b2a <HAL_GPIO_Init+0xae>
          break;
 8001aee:	e036      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001af0:	4a85      	ldr	r2, [pc, #532]	; (8001d08 <HAL_GPIO_Init+0x28c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d019      	beq.n	8001b2a <HAL_GPIO_Init+0xae>
 8001af6:	4a85      	ldr	r2, [pc, #532]	; (8001d0c <HAL_GPIO_Init+0x290>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d016      	beq.n	8001b2a <HAL_GPIO_Init+0xae>
 8001afc:	4a84      	ldr	r2, [pc, #528]	; (8001d10 <HAL_GPIO_Init+0x294>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0xae>
          break;
 8001b02:	e02c      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	623b      	str	r3, [r7, #32]
          break;
 8001b0a:	e028      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	3304      	adds	r3, #4
 8001b12:	623b      	str	r3, [r7, #32]
          break;
 8001b14:	e023      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	3308      	adds	r3, #8
 8001b1c:	623b      	str	r3, [r7, #32]
          break;
 8001b1e:	e01e      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	330c      	adds	r3, #12
 8001b26:	623b      	str	r3, [r7, #32]
          break;
 8001b28:	e019      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d102      	bne.n	8001b38 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b32:	2304      	movs	r3, #4
 8001b34:	623b      	str	r3, [r7, #32]
          break;
 8001b36:	e012      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d105      	bne.n	8001b4c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b40:	2308      	movs	r3, #8
 8001b42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	611a      	str	r2, [r3, #16]
          break;
 8001b4a:	e008      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	615a      	str	r2, [r3, #20]
          break;
 8001b56:	e002      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
          break;
 8001b5c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2bff      	cmp	r3, #255	; 0xff
 8001b62:	d801      	bhi.n	8001b68 <HAL_GPIO_Init+0xec>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	e001      	b.n	8001b6c <HAL_GPIO_Init+0xf0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2bff      	cmp	r3, #255	; 0xff
 8001b72:	d802      	bhi.n	8001b7a <HAL_GPIO_Init+0xfe>
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_Init+0x104>
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	3b08      	subs	r3, #8
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	210f      	movs	r1, #15
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	401a      	ands	r2, r3
 8001b92:	6a39      	ldr	r1, [r7, #32]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 8096 	beq.w	8001cda <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bae:	4b59      	ldr	r3, [pc, #356]	; (8001d14 <HAL_GPIO_Init+0x298>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	4a58      	ldr	r2, [pc, #352]	; (8001d14 <HAL_GPIO_Init+0x298>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6193      	str	r3, [r2, #24]
 8001bba:	4b56      	ldr	r3, [pc, #344]	; (8001d14 <HAL_GPIO_Init+0x298>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bc6:	4a54      	ldr	r2, [pc, #336]	; (8001d18 <HAL_GPIO_Init+0x29c>)
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4013      	ands	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4b      	ldr	r2, [pc, #300]	; (8001d1c <HAL_GPIO_Init+0x2a0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_Init+0x19e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4a      	ldr	r2, [pc, #296]	; (8001d20 <HAL_GPIO_Init+0x2a4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00d      	beq.n	8001c16 <HAL_GPIO_Init+0x19a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a49      	ldr	r2, [pc, #292]	; (8001d24 <HAL_GPIO_Init+0x2a8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <HAL_GPIO_Init+0x196>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a48      	ldr	r2, [pc, #288]	; (8001d28 <HAL_GPIO_Init+0x2ac>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_GPIO_Init+0x192>
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x1a0>
 8001c0e:	2304      	movs	r3, #4
 8001c10:	e004      	b.n	8001c1c <HAL_GPIO_Init+0x1a0>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e002      	b.n	8001c1c <HAL_GPIO_Init+0x1a0>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_Init+0x1a0>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1e:	f002 0203 	and.w	r2, r2, #3
 8001c22:	0092      	lsls	r2, r2, #2
 8001c24:	4093      	lsls	r3, r2
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c2c:	493a      	ldr	r1, [pc, #232]	; (8001d18 <HAL_GPIO_Init+0x29c>)
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	3302      	adds	r3, #2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c46:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4938      	ldr	r1, [pc, #224]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
 8001c52:	e006      	b.n	8001c62 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c54:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	4933      	ldr	r1, [pc, #204]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d006      	beq.n	8001c7c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	492e      	ldr	r1, [pc, #184]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
 8001c7a:	e006      	b.n	8001c8a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4929      	ldr	r1, [pc, #164]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c96:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	4924      	ldr	r1, [pc, #144]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
 8001ca2:	e006      	b.n	8001cb2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ca4:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	491f      	ldr	r1, [pc, #124]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	491a      	ldr	r1, [pc, #104]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60cb      	str	r3, [r1, #12]
 8001cca:	e006      	b.n	8001cda <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	4915      	ldr	r1, [pc, #84]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	3301      	adds	r3, #1
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f47f aed0 	bne.w	8001a90 <HAL_GPIO_Init+0x14>
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	372c      	adds	r7, #44	; 0x2c
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	10210000 	.word	0x10210000
 8001d00:	10110000 	.word	0x10110000
 8001d04:	10120000 	.word	0x10120000
 8001d08:	10310000 	.word	0x10310000
 8001d0c:	10320000 	.word	0x10320000
 8001d10:	10220000 	.word	0x10220000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010000 	.word	0x40010000
 8001d1c:	40010800 	.word	0x40010800
 8001d20:	40010c00 	.word	0x40010c00
 8001d24:	40011000 	.word	0x40011000
 8001d28:	40011400 	.word	0x40011400
 8001d2c:	40010400 	.word	0x40010400

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d4c:	e003      	b.n	8001d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	611a      	str	r2, [r3, #16]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d78:	887a      	ldrh	r2, [r7, #2]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001d7e:	e002      	b.n	8001d86 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d80:	887a      	ldrh	r2, [r7, #2]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	611a      	str	r2, [r3, #16]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e304      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8087 	beq.w	8001ebe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db0:	4b92      	ldr	r3, [pc, #584]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d00c      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dbc:	4b8f      	ldr	r3, [pc, #572]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d112      	bne.n	8001dee <HAL_RCC_OscConfig+0x5e>
 8001dc8:	4b8c      	ldr	r3, [pc, #560]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd4:	d10b      	bne.n	8001dee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd6:	4b89      	ldr	r3, [pc, #548]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d06c      	beq.n	8001ebc <HAL_RCC_OscConfig+0x12c>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d168      	bne.n	8001ebc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e2de      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x76>
 8001df8:	4b80      	ldr	r3, [pc, #512]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a7f      	ldr	r2, [pc, #508]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	e02e      	b.n	8001e64 <HAL_RCC_OscConfig+0xd4>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x98>
 8001e0e:	4b7b      	ldr	r3, [pc, #492]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a7a      	ldr	r2, [pc, #488]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	4b78      	ldr	r3, [pc, #480]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a77      	ldr	r2, [pc, #476]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e01d      	b.n	8001e64 <HAL_RCC_OscConfig+0xd4>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0xbc>
 8001e32:	4b72      	ldr	r3, [pc, #456]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a71      	ldr	r2, [pc, #452]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b6f      	ldr	r3, [pc, #444]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a6e      	ldr	r2, [pc, #440]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e00b      	b.n	8001e64 <HAL_RCC_OscConfig+0xd4>
 8001e4c:	4b6b      	ldr	r3, [pc, #428]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a6a      	ldr	r2, [pc, #424]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b68      	ldr	r3, [pc, #416]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a67      	ldr	r2, [pc, #412]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d013      	beq.n	8001e94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8c4 	bl	8000ff8 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff f8c0 	bl	8000ff8 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e292      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4b5d      	ldr	r3, [pc, #372]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0xe4>
 8001e92:	e014      	b.n	8001ebe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff f8b0 	bl	8000ff8 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7ff f8ac 	bl	8000ff8 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	; 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e27e      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eae:	4b53      	ldr	r3, [pc, #332]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x10c>
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d063      	beq.n	8001f92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eca:	4b4c      	ldr	r3, [pc, #304]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00b      	beq.n	8001eee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ed6:	4b49      	ldr	r3, [pc, #292]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d11c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x18c>
 8001ee2:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d116      	bne.n	8001f1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eee:	4b43      	ldr	r3, [pc, #268]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <HAL_RCC_OscConfig+0x176>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e252      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f06:	4b3d      	ldr	r3, [pc, #244]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4939      	ldr	r1, [pc, #228]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1a:	e03a      	b.n	8001f92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d020      	beq.n	8001f66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f24:	4b36      	ldr	r3, [pc, #216]	; (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7ff f865 	bl	8000ff8 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f32:	f7ff f861 	bl	8000ff8 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e233      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f50:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4927      	ldr	r1, [pc, #156]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	600b      	str	r3, [r1, #0]
 8001f64:	e015      	b.n	8001f92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <HAL_RCC_OscConfig+0x270>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7ff f844 	bl	8000ff8 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f74:	f7ff f840 	bl	8000ff8 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e212      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d03a      	beq.n	8002014 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d019      	beq.n	8001fda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_RCC_OscConfig+0x274>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fac:	f7ff f824 	bl	8000ff8 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb4:	f7ff f820 	bl	8000ff8 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e1f2      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f000 fbca 	bl	800276c <RCC_Delay>
 8001fd8:	e01c      	b.n	8002014 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_RCC_OscConfig+0x274>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f80a 	bl	8000ff8 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe6:	e00f      	b.n	8002008 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe8:	f7ff f806 	bl	8000ff8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d908      	bls.n	8002008 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1d8      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	42420000 	.word	0x42420000
 8002004:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002008:	4b9b      	ldr	r3, [pc, #620]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e9      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80a6 	beq.w	800216e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002026:	4b94      	ldr	r3, [pc, #592]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10d      	bne.n	800204e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	4b91      	ldr	r3, [pc, #580]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	4a90      	ldr	r2, [pc, #576]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	61d3      	str	r3, [r2, #28]
 800203e:	4b8e      	ldr	r3, [pc, #568]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204a:	2301      	movs	r3, #1
 800204c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204e:	4b8b      	ldr	r3, [pc, #556]	; (800227c <HAL_RCC_OscConfig+0x4ec>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d118      	bne.n	800208c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205a:	4b88      	ldr	r3, [pc, #544]	; (800227c <HAL_RCC_OscConfig+0x4ec>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a87      	ldr	r2, [pc, #540]	; (800227c <HAL_RCC_OscConfig+0x4ec>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002066:	f7fe ffc7 	bl	8000ff8 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206e:	f7fe ffc3 	bl	8000ff8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b64      	cmp	r3, #100	; 0x64
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e195      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	4b7e      	ldr	r3, [pc, #504]	; (800227c <HAL_RCC_OscConfig+0x4ec>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x312>
 8002094:	4b78      	ldr	r3, [pc, #480]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4a77      	ldr	r2, [pc, #476]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6213      	str	r3, [r2, #32]
 80020a0:	e02d      	b.n	80020fe <HAL_RCC_OscConfig+0x36e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x334>
 80020aa:	4b73      	ldr	r3, [pc, #460]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a72      	ldr	r2, [pc, #456]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	6213      	str	r3, [r2, #32]
 80020b6:	4b70      	ldr	r3, [pc, #448]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4a6f      	ldr	r2, [pc, #444]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80020bc:	f023 0304 	bic.w	r3, r3, #4
 80020c0:	6213      	str	r3, [r2, #32]
 80020c2:	e01c      	b.n	80020fe <HAL_RCC_OscConfig+0x36e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	d10c      	bne.n	80020e6 <HAL_RCC_OscConfig+0x356>
 80020cc:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	4a69      	ldr	r2, [pc, #420]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	6213      	str	r3, [r2, #32]
 80020d8:	4b67      	ldr	r3, [pc, #412]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a66      	ldr	r2, [pc, #408]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6213      	str	r3, [r2, #32]
 80020e4:	e00b      	b.n	80020fe <HAL_RCC_OscConfig+0x36e>
 80020e6:	4b64      	ldr	r3, [pc, #400]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4a63      	ldr	r2, [pc, #396]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	6213      	str	r3, [r2, #32]
 80020f2:	4b61      	ldr	r3, [pc, #388]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4a60      	ldr	r2, [pc, #384]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80020f8:	f023 0304 	bic.w	r3, r3, #4
 80020fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d015      	beq.n	8002132 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002106:	f7fe ff77 	bl	8000ff8 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7fe ff73 	bl	8000ff8 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	; 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e143      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002124:	4b54      	ldr	r3, [pc, #336]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ee      	beq.n	800210e <HAL_RCC_OscConfig+0x37e>
 8002130:	e014      	b.n	800215c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002132:	f7fe ff61 	bl	8000ff8 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe ff5d 	bl	8000ff8 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e12d      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002150:	4b49      	ldr	r3, [pc, #292]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1ee      	bne.n	800213a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d105      	bne.n	800216e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002162:	4b45      	ldr	r3, [pc, #276]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4a44      	ldr	r2, [pc, #272]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 8002168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 808c 	beq.w	8002290 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002184:	d10e      	bne.n	80021a4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002186:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800218e:	2b08      	cmp	r3, #8
 8002190:	d108      	bne.n	80021a4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002192:	4b39      	ldr	r3, [pc, #228]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800219a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e103      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d14e      	bne.n	800224a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80021ac:	4b32      	ldr	r3, [pc, #200]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d009      	beq.n	80021cc <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80021b8:	4b2f      	ldr	r3, [pc, #188]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0ef      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80021cc:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <HAL_RCC_OscConfig+0x4f0>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7fe ff11 	bl	8000ff8 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80021da:	f7fe ff0d 	bl	8000ff8 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b64      	cmp	r3, #100	; 0x64
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0df      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80021ec:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80021f8:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002204:	491c      	ldr	r1, [pc, #112]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 8002206:	4313      	orrs	r3, r2
 8002208:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4918      	ldr	r1, [pc, #96]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 8002218:	4313      	orrs	r3, r2
 800221a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HAL_RCC_OscConfig+0x4f0>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe fee9 	bl	8000ff8 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800222a:	f7fe fee5 	bl	8000ff8 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b64      	cmp	r3, #100	; 0x64
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e0b7      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800223c:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x49a>
 8002248:	e022      	b.n	8002290 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <HAL_RCC_OscConfig+0x4e8>)
 8002250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002254:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_RCC_OscConfig+0x4f0>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7fe fecc 	bl	8000ff8 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002262:	e00f      	b.n	8002284 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002264:	f7fe fec8 	bl	8000ff8 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d908      	bls.n	8002284 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e09a      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	40007000 	.word	0x40007000
 8002280:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002284:	4b4b      	ldr	r3, [pc, #300]	; (80023b4 <HAL_RCC_OscConfig+0x624>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e9      	bne.n	8002264 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8088 	beq.w	80023aa <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800229a:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <HAL_RCC_OscConfig+0x624>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d068      	beq.n	8002378 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d14d      	bne.n	800234a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ae:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <HAL_RCC_OscConfig+0x628>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7fe fea0 	bl	8000ff8 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022bc:	f7fe fe9c 	bl	8000ff8 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e06e      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ce:	4b39      	ldr	r3, [pc, #228]	; (80023b4 <HAL_RCC_OscConfig+0x624>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e2:	d10f      	bne.n	8002304 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80022e4:	4b33      	ldr	r3, [pc, #204]	; (80023b4 <HAL_RCC_OscConfig+0x624>)
 80022e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4931      	ldr	r1, [pc, #196]	; (80023b4 <HAL_RCC_OscConfig+0x624>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022f2:	4b30      	ldr	r3, [pc, #192]	; (80023b4 <HAL_RCC_OscConfig+0x624>)
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	f023 020f 	bic.w	r2, r3, #15
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	492d      	ldr	r1, [pc, #180]	; (80023b4 <HAL_RCC_OscConfig+0x624>)
 8002300:	4313      	orrs	r3, r2
 8002302:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002304:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <HAL_RCC_OscConfig+0x624>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	430b      	orrs	r3, r1
 8002316:	4927      	ldr	r1, [pc, #156]	; (80023b4 <HAL_RCC_OscConfig+0x624>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231c:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x628>)
 800231e:	2201      	movs	r2, #1
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7fe fe69 	bl	8000ff8 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232a:	f7fe fe65 	bl	8000ff8 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e037      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800233c:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_RCC_OscConfig+0x624>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x59a>
 8002348:	e02f      	b.n	80023aa <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <HAL_RCC_OscConfig+0x628>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7fe fe52 	bl	8000ff8 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe fe4e 	bl	8000ff8 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e020      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_RCC_OscConfig+0x624>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c8>
 8002376:	e018      	b.n	80023aa <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e013      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_OscConfig+0x624>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	429a      	cmp	r2, r3
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000
 80023b8:	42420060 	.word	0x42420060

080023bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0d0      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d0:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d910      	bls.n	8002400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b67      	ldr	r3, [pc, #412]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 0207 	bic.w	r2, r3, #7
 80023e6:	4965      	ldr	r1, [pc, #404]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b63      	ldr	r3, [pc, #396]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0b8      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d020      	beq.n	800244e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002418:	4b59      	ldr	r3, [pc, #356]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a58      	ldr	r2, [pc, #352]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002422:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002430:	4b53      	ldr	r3, [pc, #332]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a52      	ldr	r2, [pc, #328]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800243a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	494d      	ldr	r1, [pc, #308]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d040      	beq.n	80024dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d115      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e07f      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247a:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e073      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248a:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e06b      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249a:	4b39      	ldr	r3, [pc, #228]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f023 0203 	bic.w	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4936      	ldr	r1, [pc, #216]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ac:	f7fe fda4 	bl	8000ff8 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b4:	f7fe fda0 	bl	8000ff8 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e053      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 020c 	and.w	r2, r3, #12
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	429a      	cmp	r2, r3
 80024da:	d1eb      	bne.n	80024b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024dc:	4b27      	ldr	r3, [pc, #156]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d210      	bcs.n	800250c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 0207 	bic.w	r2, r3, #7
 80024f2:	4922      	ldr	r1, [pc, #136]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e032      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4916      	ldr	r1, [pc, #88]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	490e      	ldr	r1, [pc, #56]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800254a:	f000 f821 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 800254e:	4601      	mov	r1, r0
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	5cd3      	ldrb	r3, [r2, r3]
 800255e:	fa21 f303 	lsr.w	r3, r1, r3
 8002562:	4a09      	ldr	r2, [pc, #36]	; (8002588 <HAL_RCC_ClockConfig+0x1cc>)
 8002564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_RCC_ClockConfig+0x1d0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fd02 	bl	8000f74 <HAL_InitTick>

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40022000 	.word	0x40022000
 8002580:	40021000 	.word	0x40021000
 8002584:	08003ae4 	.word	0x08003ae4
 8002588:	20000000 	.word	0x20000000
 800258c:	20000004 	.word	0x20000004

08002590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002592:	b091      	sub	sp, #68	; 0x44
 8002594:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002596:	4b56      	ldr	r3, [pc, #344]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002598:	f107 0414 	add.w	r4, r7, #20
 800259c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800259e:	c407      	stmia	r4!, {r0, r1, r2}
 80025a0:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80025a2:	4b54      	ldr	r3, [pc, #336]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80025a4:	1d3c      	adds	r4, r7, #4
 80025a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
 80025b0:	2300      	movs	r3, #0
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
 80025b4:	2300      	movs	r3, #0
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b8:	2300      	movs	r3, #0
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025c8:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x168>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d002      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0x4e>
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d003      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x54>
 80025dc:	e07f      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025de:	4b47      	ldr	r3, [pc, #284]	; (80026fc <HAL_RCC_GetSysClockFreq+0x16c>)
 80025e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025e2:	e07f      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e6:	0c9b      	lsrs	r3, r3, #18
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80025f0:	4413      	add	r3, r2
 80025f2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d065      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002602:	4b3d      	ldr	r3, [pc, #244]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800260e:	4413      	add	r3, r2
 8002610:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002614:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002616:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d043      	beq.n	80026aa <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002622:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	3301      	adds	r3, #1
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002630:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	3302      	adds	r3, #2
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	4619      	mov	r1, r3
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	f04f 0400 	mov.w	r4, #0
 800264c:	fb03 f502 	mul.w	r5, r3, r2
 8002650:	fb01 f004 	mul.w	r0, r1, r4
 8002654:	4428      	add	r0, r5
 8002656:	fba1 3403 	umull	r3, r4, r1, r3
 800265a:	1902      	adds	r2, r0, r4
 800265c:	4614      	mov	r4, r2
 800265e:	4a27      	ldr	r2, [pc, #156]	; (80026fc <HAL_RCC_GetSysClockFreq+0x16c>)
 8002660:	fb02 f104 	mul.w	r1, r2, r4
 8002664:	2200      	movs	r2, #0
 8002666:	fb02 f203 	mul.w	r2, r2, r3
 800266a:	440a      	add	r2, r1
 800266c:	4923      	ldr	r1, [pc, #140]	; (80026fc <HAL_RCC_GetSysClockFreq+0x16c>)
 800266e:	fba3 5601 	umull	r5, r6, r3, r1
 8002672:	1993      	adds	r3, r2, r6
 8002674:	461e      	mov	r6, r3
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	4619      	mov	r1, r3
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	f04f 0400 	mov.w	r4, #0
 8002684:	fb03 fc02 	mul.w	ip, r3, r2
 8002688:	fb01 f004 	mul.w	r0, r1, r4
 800268c:	4460      	add	r0, ip
 800268e:	fba1 3403 	umull	r3, r4, r1, r3
 8002692:	1902      	adds	r2, r0, r4
 8002694:	4614      	mov	r4, r2
 8002696:	461a      	mov	r2, r3
 8002698:	4623      	mov	r3, r4
 800269a:	4628      	mov	r0, r5
 800269c:	4631      	mov	r1, r6
 800269e:	f7fd fdc1 	bl	8000224 <__aeabi_uldivmod>
 80026a2:	4603      	mov	r3, r0
 80026a4:	460c      	mov	r4, r1
 80026a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026a8:	e007      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	4a13      	ldr	r2, [pc, #76]	; (80026fc <HAL_RCC_GetSysClockFreq+0x16c>)
 80026ae:	fb02 f203 	mul.w	r2, r2, r3
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80026ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80026be:	461a      	mov	r2, r3
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d108      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80026c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026cc:	e004      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <HAL_RCC_GetSysClockFreq+0x170>)
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80026d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026dc:	e002      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_RCC_GetSysClockFreq+0x174>)
 80026e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3744      	adds	r7, #68	; 0x44
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ee:	bf00      	nop
 80026f0:	08003ac4 	.word	0x08003ac4
 80026f4:	08003ad4 	.word	0x08003ad4
 80026f8:	40021000 	.word	0x40021000
 80026fc:	017d7840 	.word	0x017d7840
 8002700:	003d0900 	.word	0x003d0900
 8002704:	007a1200 	.word	0x007a1200

08002708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800270c:	4b02      	ldr	r3, [pc, #8]	; (8002718 <HAL_RCC_GetHCLKFreq+0x10>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	20000000 	.word	0x20000000

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002720:	f7ff fff2 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002724:	4601      	mov	r1, r0
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4a03      	ldr	r2, [pc, #12]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002732:	5cd3      	ldrb	r3, [r2, r3]
 8002734:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	08003af4 	.word	0x08003af4

08002744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002748:	f7ff ffde 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 800274c:	4601      	mov	r1, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	0adb      	lsrs	r3, r3, #11
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4a03      	ldr	r2, [pc, #12]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	08003af4 	.word	0x08003af4

0800276c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <RCC_Delay+0x34>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <RCC_Delay+0x38>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0a5b      	lsrs	r3, r3, #9
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002788:	bf00      	nop
  }
  while (Delay --);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1e5a      	subs	r2, r3, #1
 800278e:	60fa      	str	r2, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f9      	bne.n	8002788 <RCC_Delay+0x1c>
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000000 	.word	0x20000000
 80027a4:	10624dd3 	.word	0x10624dd3

080027a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e03f      	b.n	800283a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe fb4a 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	; 0x24
 80027d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f90b 	bl	8002a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b088      	sub	sp, #32
 8002846:	af02      	add	r7, sp, #8
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	4613      	mov	r3, r2
 8002850:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b20      	cmp	r3, #32
 8002860:	f040 8083 	bne.w	800296a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_UART_Transmit+0x2e>
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e07b      	b.n	800296c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_UART_Transmit+0x40>
 800287e:	2302      	movs	r3, #2
 8002880:	e074      	b.n	800296c <HAL_UART_Transmit+0x12a>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2221      	movs	r2, #33	; 0x21
 8002894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002898:	f7fe fbae 	bl	8000ff8 <HAL_GetTick>
 800289c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	88fa      	ldrh	r2, [r7, #6]
 80028a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	88fa      	ldrh	r2, [r7, #6]
 80028a8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028aa:	e042      	b.n	8002932 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c2:	d122      	bne.n	800290a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2200      	movs	r2, #0
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f850 	bl	8002974 <UART_WaitOnFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e046      	b.n	800296c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	3302      	adds	r3, #2
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	e017      	b.n	8002932 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3301      	adds	r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	e013      	b.n	8002932 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2200      	movs	r2, #0
 8002912:	2180      	movs	r1, #128	; 0x80
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f82d 	bl	8002974 <UART_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e023      	b.n	800296c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	60ba      	str	r2, [r7, #8]
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1b7      	bne.n	80028ac <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2200      	movs	r2, #0
 8002944:	2140      	movs	r1, #64	; 0x40
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f814 	bl	8002974 <UART_WaitOnFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e00a      	b.n	800296c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	e000      	b.n	800296c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800296a:	2302      	movs	r3, #2
  }
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	4613      	mov	r3, r2
 8002982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002984:	e02c      	b.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d028      	beq.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002994:	f7fe fb30 	bl	8000ff8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d21d      	bcs.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e00f      	b.n	8002a00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	4013      	ands	r3, r2
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d0c3      	beq.n	8002986 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a42:	f023 030c 	bic.w	r3, r3, #12
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	68f9      	ldr	r1, [r7, #12]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a52      	ldr	r2, [pc, #328]	; (8002bb4 <UART_SetConfig+0x1ac>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d14e      	bne.n	8002b0e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a70:	f7ff fe68 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 8002a74:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009a      	lsls	r2, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	4a4a      	ldr	r2, [pc, #296]	; (8002bb8 <UART_SetConfig+0x1b0>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	0119      	lsls	r1, r3, #4
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009a      	lsls	r2, r3, #2
 8002aa0:	441a      	add	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aac:	4b42      	ldr	r3, [pc, #264]	; (8002bb8 <UART_SetConfig+0x1b0>)
 8002aae:	fba3 0302 	umull	r0, r3, r3, r2
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2064      	movs	r0, #100	; 0x64
 8002ab6:	fb00 f303 	mul.w	r3, r0, r3
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	3332      	adds	r3, #50	; 0x32
 8002ac0:	4a3d      	ldr	r2, [pc, #244]	; (8002bb8 <UART_SetConfig+0x1b0>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002acc:	4419      	add	r1, r3
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009a      	lsls	r2, r3, #2
 8002ad8:	441a      	add	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae4:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <UART_SetConfig+0x1b0>)
 8002ae6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	2064      	movs	r0, #100	; 0x64
 8002aee:	fb00 f303 	mul.w	r3, r0, r3
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	3332      	adds	r3, #50	; 0x32
 8002af8:	4a2f      	ldr	r2, [pc, #188]	; (8002bb8 <UART_SetConfig+0x1b0>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	f003 020f 	and.w	r2, r3, #15
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	440a      	add	r2, r1
 8002b0a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002b0c:	e04d      	b.n	8002baa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b0e:	f7ff fe05 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8002b12:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009a      	lsls	r2, r3, #2
 8002b1e:	441a      	add	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	4a23      	ldr	r2, [pc, #140]	; (8002bb8 <UART_SetConfig+0x1b0>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	0119      	lsls	r1, r3, #4
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009a      	lsls	r2, r3, #2
 8002b3e:	441a      	add	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <UART_SetConfig+0x1b0>)
 8002b4c:	fba3 0302 	umull	r0, r3, r3, r2
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	2064      	movs	r0, #100	; 0x64
 8002b54:	fb00 f303 	mul.w	r3, r0, r3
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	3332      	adds	r3, #50	; 0x32
 8002b5e:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <UART_SetConfig+0x1b0>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b6a:	4419      	add	r1, r3
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	009a      	lsls	r2, r3, #2
 8002b76:	441a      	add	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <UART_SetConfig+0x1b0>)
 8002b84:	fba3 0302 	umull	r0, r3, r3, r2
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	2064      	movs	r0, #100	; 0x64
 8002b8c:	fb00 f303 	mul.w	r3, r0, r3
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	3332      	adds	r3, #50	; 0x32
 8002b96:	4a08      	ldr	r2, [pc, #32]	; (8002bb8 <UART_SetConfig+0x1b0>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	f003 020f 	and.w	r2, r3, #15
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	440a      	add	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40013800 	.word	0x40013800
 8002bb8:	51eb851f 	.word	0x51eb851f

08002bbc <__errno>:
 8002bbc:	4b01      	ldr	r3, [pc, #4]	; (8002bc4 <__errno+0x8>)
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	2000000c 	.word	0x2000000c

08002bc8 <memset>:
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4402      	add	r2, r0
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d100      	bne.n	8002bd2 <memset+0xa>
 8002bd0:	4770      	bx	lr
 8002bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bd6:	e7f9      	b.n	8002bcc <memset+0x4>

08002bd8 <iprintf>:
 8002bd8:	b40f      	push	{r0, r1, r2, r3}
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <iprintf+0x2c>)
 8002bdc:	b513      	push	{r0, r1, r4, lr}
 8002bde:	681c      	ldr	r4, [r3, #0]
 8002be0:	b124      	cbz	r4, 8002bec <iprintf+0x14>
 8002be2:	69a3      	ldr	r3, [r4, #24]
 8002be4:	b913      	cbnz	r3, 8002bec <iprintf+0x14>
 8002be6:	4620      	mov	r0, r4
 8002be8:	f000 f84e 	bl	8002c88 <__sinit>
 8002bec:	ab05      	add	r3, sp, #20
 8002bee:	9a04      	ldr	r2, [sp, #16]
 8002bf0:	68a1      	ldr	r1, [r4, #8]
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	f000 f953 	bl	8002ea0 <_vfiprintf_r>
 8002bfa:	b002      	add	sp, #8
 8002bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c00:	b004      	add	sp, #16
 8002c02:	4770      	bx	lr
 8002c04:	2000000c 	.word	0x2000000c

08002c08 <std>:
 8002c08:	2300      	movs	r3, #0
 8002c0a:	b510      	push	{r4, lr}
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8002c12:	6083      	str	r3, [r0, #8]
 8002c14:	8181      	strh	r1, [r0, #12]
 8002c16:	6643      	str	r3, [r0, #100]	; 0x64
 8002c18:	81c2      	strh	r2, [r0, #14]
 8002c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c1e:	6183      	str	r3, [r0, #24]
 8002c20:	4619      	mov	r1, r3
 8002c22:	2208      	movs	r2, #8
 8002c24:	305c      	adds	r0, #92	; 0x5c
 8002c26:	f7ff ffcf 	bl	8002bc8 <memset>
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <std+0x38>)
 8002c2c:	6224      	str	r4, [r4, #32]
 8002c2e:	6263      	str	r3, [r4, #36]	; 0x24
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <std+0x3c>)
 8002c32:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <std+0x40>)
 8002c36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <std+0x44>)
 8002c3a:	6323      	str	r3, [r4, #48]	; 0x30
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	bf00      	nop
 8002c40:	080033fd 	.word	0x080033fd
 8002c44:	0800341f 	.word	0x0800341f
 8002c48:	08003457 	.word	0x08003457
 8002c4c:	0800347b 	.word	0x0800347b

08002c50 <_cleanup_r>:
 8002c50:	4901      	ldr	r1, [pc, #4]	; (8002c58 <_cleanup_r+0x8>)
 8002c52:	f000 b885 	b.w	8002d60 <_fwalk_reent>
 8002c56:	bf00      	nop
 8002c58:	08003755 	.word	0x08003755

08002c5c <__sfmoreglue>:
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	2568      	movs	r5, #104	; 0x68
 8002c60:	1e4a      	subs	r2, r1, #1
 8002c62:	4355      	muls	r5, r2
 8002c64:	460e      	mov	r6, r1
 8002c66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c6a:	f000 f897 	bl	8002d9c <_malloc_r>
 8002c6e:	4604      	mov	r4, r0
 8002c70:	b140      	cbz	r0, 8002c84 <__sfmoreglue+0x28>
 8002c72:	2100      	movs	r1, #0
 8002c74:	e9c0 1600 	strd	r1, r6, [r0]
 8002c78:	300c      	adds	r0, #12
 8002c7a:	60a0      	str	r0, [r4, #8]
 8002c7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c80:	f7ff ffa2 	bl	8002bc8 <memset>
 8002c84:	4620      	mov	r0, r4
 8002c86:	bd70      	pop	{r4, r5, r6, pc}

08002c88 <__sinit>:
 8002c88:	6983      	ldr	r3, [r0, #24]
 8002c8a:	b510      	push	{r4, lr}
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	bb33      	cbnz	r3, 8002cde <__sinit+0x56>
 8002c90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002c94:	6503      	str	r3, [r0, #80]	; 0x50
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <__sinit+0x58>)
 8002c98:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <__sinit+0x5c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6282      	str	r2, [r0, #40]	; 0x28
 8002c9e:	4298      	cmp	r0, r3
 8002ca0:	bf04      	itt	eq
 8002ca2:	2301      	moveq	r3, #1
 8002ca4:	6183      	streq	r3, [r0, #24]
 8002ca6:	f000 f81f 	bl	8002ce8 <__sfp>
 8002caa:	6060      	str	r0, [r4, #4]
 8002cac:	4620      	mov	r0, r4
 8002cae:	f000 f81b 	bl	8002ce8 <__sfp>
 8002cb2:	60a0      	str	r0, [r4, #8]
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f000 f817 	bl	8002ce8 <__sfp>
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60e0      	str	r0, [r4, #12]
 8002cbe:	2104      	movs	r1, #4
 8002cc0:	6860      	ldr	r0, [r4, #4]
 8002cc2:	f7ff ffa1 	bl	8002c08 <std>
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	2109      	movs	r1, #9
 8002cca:	68a0      	ldr	r0, [r4, #8]
 8002ccc:	f7ff ff9c 	bl	8002c08 <std>
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	2112      	movs	r1, #18
 8002cd4:	68e0      	ldr	r0, [r4, #12]
 8002cd6:	f7ff ff97 	bl	8002c08 <std>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	61a3      	str	r3, [r4, #24]
 8002cde:	bd10      	pop	{r4, pc}
 8002ce0:	08003afc 	.word	0x08003afc
 8002ce4:	08002c51 	.word	0x08002c51

08002ce8 <__sfp>:
 8002ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cea:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <__sfp+0x70>)
 8002cec:	4607      	mov	r7, r0
 8002cee:	681e      	ldr	r6, [r3, #0]
 8002cf0:	69b3      	ldr	r3, [r6, #24]
 8002cf2:	b913      	cbnz	r3, 8002cfa <__sfp+0x12>
 8002cf4:	4630      	mov	r0, r6
 8002cf6:	f7ff ffc7 	bl	8002c88 <__sinit>
 8002cfa:	3648      	adds	r6, #72	; 0x48
 8002cfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	d503      	bpl.n	8002d0c <__sfp+0x24>
 8002d04:	6833      	ldr	r3, [r6, #0]
 8002d06:	b133      	cbz	r3, 8002d16 <__sfp+0x2e>
 8002d08:	6836      	ldr	r6, [r6, #0]
 8002d0a:	e7f7      	b.n	8002cfc <__sfp+0x14>
 8002d0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d10:	b16d      	cbz	r5, 8002d2e <__sfp+0x46>
 8002d12:	3468      	adds	r4, #104	; 0x68
 8002d14:	e7f4      	b.n	8002d00 <__sfp+0x18>
 8002d16:	2104      	movs	r1, #4
 8002d18:	4638      	mov	r0, r7
 8002d1a:	f7ff ff9f 	bl	8002c5c <__sfmoreglue>
 8002d1e:	6030      	str	r0, [r6, #0]
 8002d20:	2800      	cmp	r0, #0
 8002d22:	d1f1      	bne.n	8002d08 <__sfp+0x20>
 8002d24:	230c      	movs	r3, #12
 8002d26:	4604      	mov	r4, r0
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <__sfp+0x74>)
 8002d30:	6665      	str	r5, [r4, #100]	; 0x64
 8002d32:	e9c4 5500 	strd	r5, r5, [r4]
 8002d36:	60a5      	str	r5, [r4, #8]
 8002d38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002d3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002d40:	2208      	movs	r2, #8
 8002d42:	4629      	mov	r1, r5
 8002d44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d48:	f7ff ff3e 	bl	8002bc8 <memset>
 8002d4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d54:	e7e9      	b.n	8002d2a <__sfp+0x42>
 8002d56:	bf00      	nop
 8002d58:	08003afc 	.word	0x08003afc
 8002d5c:	ffff0001 	.word	0xffff0001

08002d60 <_fwalk_reent>:
 8002d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d64:	4680      	mov	r8, r0
 8002d66:	4689      	mov	r9, r1
 8002d68:	2600      	movs	r6, #0
 8002d6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d6e:	b914      	cbnz	r4, 8002d76 <_fwalk_reent+0x16>
 8002d70:	4630      	mov	r0, r6
 8002d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002d7a:	3f01      	subs	r7, #1
 8002d7c:	d501      	bpl.n	8002d82 <_fwalk_reent+0x22>
 8002d7e:	6824      	ldr	r4, [r4, #0]
 8002d80:	e7f5      	b.n	8002d6e <_fwalk_reent+0xe>
 8002d82:	89ab      	ldrh	r3, [r5, #12]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d907      	bls.n	8002d98 <_fwalk_reent+0x38>
 8002d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	d003      	beq.n	8002d98 <_fwalk_reent+0x38>
 8002d90:	4629      	mov	r1, r5
 8002d92:	4640      	mov	r0, r8
 8002d94:	47c8      	blx	r9
 8002d96:	4306      	orrs	r6, r0
 8002d98:	3568      	adds	r5, #104	; 0x68
 8002d9a:	e7ee      	b.n	8002d7a <_fwalk_reent+0x1a>

08002d9c <_malloc_r>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	1ccd      	adds	r5, r1, #3
 8002da0:	f025 0503 	bic.w	r5, r5, #3
 8002da4:	3508      	adds	r5, #8
 8002da6:	2d0c      	cmp	r5, #12
 8002da8:	bf38      	it	cc
 8002daa:	250c      	movcc	r5, #12
 8002dac:	2d00      	cmp	r5, #0
 8002dae:	4606      	mov	r6, r0
 8002db0:	db01      	blt.n	8002db6 <_malloc_r+0x1a>
 8002db2:	42a9      	cmp	r1, r5
 8002db4:	d903      	bls.n	8002dbe <_malloc_r+0x22>
 8002db6:	230c      	movs	r3, #12
 8002db8:	6033      	str	r3, [r6, #0]
 8002dba:	2000      	movs	r0, #0
 8002dbc:	bd70      	pop	{r4, r5, r6, pc}
 8002dbe:	f000 fd77 	bl	80038b0 <__malloc_lock>
 8002dc2:	4a21      	ldr	r2, [pc, #132]	; (8002e48 <_malloc_r+0xac>)
 8002dc4:	6814      	ldr	r4, [r2, #0]
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	b991      	cbnz	r1, 8002df0 <_malloc_r+0x54>
 8002dca:	4c20      	ldr	r4, [pc, #128]	; (8002e4c <_malloc_r+0xb0>)
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	b91b      	cbnz	r3, 8002dd8 <_malloc_r+0x3c>
 8002dd0:	4630      	mov	r0, r6
 8002dd2:	f000 fb03 	bl	80033dc <_sbrk_r>
 8002dd6:	6020      	str	r0, [r4, #0]
 8002dd8:	4629      	mov	r1, r5
 8002dda:	4630      	mov	r0, r6
 8002ddc:	f000 fafe 	bl	80033dc <_sbrk_r>
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	d124      	bne.n	8002e2e <_malloc_r+0x92>
 8002de4:	230c      	movs	r3, #12
 8002de6:	4630      	mov	r0, r6
 8002de8:	6033      	str	r3, [r6, #0]
 8002dea:	f000 fd62 	bl	80038b2 <__malloc_unlock>
 8002dee:	e7e4      	b.n	8002dba <_malloc_r+0x1e>
 8002df0:	680b      	ldr	r3, [r1, #0]
 8002df2:	1b5b      	subs	r3, r3, r5
 8002df4:	d418      	bmi.n	8002e28 <_malloc_r+0x8c>
 8002df6:	2b0b      	cmp	r3, #11
 8002df8:	d90f      	bls.n	8002e1a <_malloc_r+0x7e>
 8002dfa:	600b      	str	r3, [r1, #0]
 8002dfc:	18cc      	adds	r4, r1, r3
 8002dfe:	50cd      	str	r5, [r1, r3]
 8002e00:	4630      	mov	r0, r6
 8002e02:	f000 fd56 	bl	80038b2 <__malloc_unlock>
 8002e06:	f104 000b 	add.w	r0, r4, #11
 8002e0a:	1d23      	adds	r3, r4, #4
 8002e0c:	f020 0007 	bic.w	r0, r0, #7
 8002e10:	1ac3      	subs	r3, r0, r3
 8002e12:	d0d3      	beq.n	8002dbc <_malloc_r+0x20>
 8002e14:	425a      	negs	r2, r3
 8002e16:	50e2      	str	r2, [r4, r3]
 8002e18:	e7d0      	b.n	8002dbc <_malloc_r+0x20>
 8002e1a:	684b      	ldr	r3, [r1, #4]
 8002e1c:	428c      	cmp	r4, r1
 8002e1e:	bf16      	itet	ne
 8002e20:	6063      	strne	r3, [r4, #4]
 8002e22:	6013      	streq	r3, [r2, #0]
 8002e24:	460c      	movne	r4, r1
 8002e26:	e7eb      	b.n	8002e00 <_malloc_r+0x64>
 8002e28:	460c      	mov	r4, r1
 8002e2a:	6849      	ldr	r1, [r1, #4]
 8002e2c:	e7cc      	b.n	8002dc8 <_malloc_r+0x2c>
 8002e2e:	1cc4      	adds	r4, r0, #3
 8002e30:	f024 0403 	bic.w	r4, r4, #3
 8002e34:	42a0      	cmp	r0, r4
 8002e36:	d005      	beq.n	8002e44 <_malloc_r+0xa8>
 8002e38:	1a21      	subs	r1, r4, r0
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	f000 face 	bl	80033dc <_sbrk_r>
 8002e40:	3001      	adds	r0, #1
 8002e42:	d0cf      	beq.n	8002de4 <_malloc_r+0x48>
 8002e44:	6025      	str	r5, [r4, #0]
 8002e46:	e7db      	b.n	8002e00 <_malloc_r+0x64>
 8002e48:	20000094 	.word	0x20000094
 8002e4c:	20000098 	.word	0x20000098

08002e50 <__sfputc_r>:
 8002e50:	6893      	ldr	r3, [r2, #8]
 8002e52:	b410      	push	{r4}
 8002e54:	3b01      	subs	r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	6093      	str	r3, [r2, #8]
 8002e5a:	da07      	bge.n	8002e6c <__sfputc_r+0x1c>
 8002e5c:	6994      	ldr	r4, [r2, #24]
 8002e5e:	42a3      	cmp	r3, r4
 8002e60:	db01      	blt.n	8002e66 <__sfputc_r+0x16>
 8002e62:	290a      	cmp	r1, #10
 8002e64:	d102      	bne.n	8002e6c <__sfputc_r+0x1c>
 8002e66:	bc10      	pop	{r4}
 8002e68:	f000 bb0c 	b.w	8003484 <__swbuf_r>
 8002e6c:	6813      	ldr	r3, [r2, #0]
 8002e6e:	1c58      	adds	r0, r3, #1
 8002e70:	6010      	str	r0, [r2, #0]
 8002e72:	7019      	strb	r1, [r3, #0]
 8002e74:	4608      	mov	r0, r1
 8002e76:	bc10      	pop	{r4}
 8002e78:	4770      	bx	lr

08002e7a <__sfputs_r>:
 8002e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7c:	4606      	mov	r6, r0
 8002e7e:	460f      	mov	r7, r1
 8002e80:	4614      	mov	r4, r2
 8002e82:	18d5      	adds	r5, r2, r3
 8002e84:	42ac      	cmp	r4, r5
 8002e86:	d101      	bne.n	8002e8c <__sfputs_r+0x12>
 8002e88:	2000      	movs	r0, #0
 8002e8a:	e007      	b.n	8002e9c <__sfputs_r+0x22>
 8002e8c:	463a      	mov	r2, r7
 8002e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e92:	4630      	mov	r0, r6
 8002e94:	f7ff ffdc 	bl	8002e50 <__sfputc_r>
 8002e98:	1c43      	adds	r3, r0, #1
 8002e9a:	d1f3      	bne.n	8002e84 <__sfputs_r+0xa>
 8002e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ea0 <_vfiprintf_r>:
 8002ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea4:	460c      	mov	r4, r1
 8002ea6:	b09d      	sub	sp, #116	; 0x74
 8002ea8:	4617      	mov	r7, r2
 8002eaa:	461d      	mov	r5, r3
 8002eac:	4606      	mov	r6, r0
 8002eae:	b118      	cbz	r0, 8002eb8 <_vfiprintf_r+0x18>
 8002eb0:	6983      	ldr	r3, [r0, #24]
 8002eb2:	b90b      	cbnz	r3, 8002eb8 <_vfiprintf_r+0x18>
 8002eb4:	f7ff fee8 	bl	8002c88 <__sinit>
 8002eb8:	4b7c      	ldr	r3, [pc, #496]	; (80030ac <_vfiprintf_r+0x20c>)
 8002eba:	429c      	cmp	r4, r3
 8002ebc:	d158      	bne.n	8002f70 <_vfiprintf_r+0xd0>
 8002ebe:	6874      	ldr	r4, [r6, #4]
 8002ec0:	89a3      	ldrh	r3, [r4, #12]
 8002ec2:	0718      	lsls	r0, r3, #28
 8002ec4:	d55e      	bpl.n	8002f84 <_vfiprintf_r+0xe4>
 8002ec6:	6923      	ldr	r3, [r4, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d05b      	beq.n	8002f84 <_vfiprintf_r+0xe4>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9309      	str	r3, [sp, #36]	; 0x24
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ed6:	2330      	movs	r3, #48	; 0x30
 8002ed8:	f04f 0b01 	mov.w	fp, #1
 8002edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ee0:	9503      	str	r5, [sp, #12]
 8002ee2:	46b8      	mov	r8, r7
 8002ee4:	4645      	mov	r5, r8
 8002ee6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002eea:	b10b      	cbz	r3, 8002ef0 <_vfiprintf_r+0x50>
 8002eec:	2b25      	cmp	r3, #37	; 0x25
 8002eee:	d154      	bne.n	8002f9a <_vfiprintf_r+0xfa>
 8002ef0:	ebb8 0a07 	subs.w	sl, r8, r7
 8002ef4:	d00b      	beq.n	8002f0e <_vfiprintf_r+0x6e>
 8002ef6:	4653      	mov	r3, sl
 8002ef8:	463a      	mov	r2, r7
 8002efa:	4621      	mov	r1, r4
 8002efc:	4630      	mov	r0, r6
 8002efe:	f7ff ffbc 	bl	8002e7a <__sfputs_r>
 8002f02:	3001      	adds	r0, #1
 8002f04:	f000 80c2 	beq.w	800308c <_vfiprintf_r+0x1ec>
 8002f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f0a:	4453      	add	r3, sl
 8002f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f0e:	f898 3000 	ldrb.w	r3, [r8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80ba 	beq.w	800308c <_vfiprintf_r+0x1ec>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f22:	9304      	str	r3, [sp, #16]
 8002f24:	9307      	str	r3, [sp, #28]
 8002f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8002f2c:	46a8      	mov	r8, r5
 8002f2e:	2205      	movs	r2, #5
 8002f30:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002f34:	485e      	ldr	r0, [pc, #376]	; (80030b0 <_vfiprintf_r+0x210>)
 8002f36:	f000 fcad 	bl	8003894 <memchr>
 8002f3a:	9b04      	ldr	r3, [sp, #16]
 8002f3c:	bb78      	cbnz	r0, 8002f9e <_vfiprintf_r+0xfe>
 8002f3e:	06d9      	lsls	r1, r3, #27
 8002f40:	bf44      	itt	mi
 8002f42:	2220      	movmi	r2, #32
 8002f44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f48:	071a      	lsls	r2, r3, #28
 8002f4a:	bf44      	itt	mi
 8002f4c:	222b      	movmi	r2, #43	; 0x2b
 8002f4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f52:	782a      	ldrb	r2, [r5, #0]
 8002f54:	2a2a      	cmp	r2, #42	; 0x2a
 8002f56:	d02a      	beq.n	8002fae <_vfiprintf_r+0x10e>
 8002f58:	46a8      	mov	r8, r5
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	250a      	movs	r5, #10
 8002f5e:	9a07      	ldr	r2, [sp, #28]
 8002f60:	4641      	mov	r1, r8
 8002f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f66:	3b30      	subs	r3, #48	; 0x30
 8002f68:	2b09      	cmp	r3, #9
 8002f6a:	d969      	bls.n	8003040 <_vfiprintf_r+0x1a0>
 8002f6c:	b360      	cbz	r0, 8002fc8 <_vfiprintf_r+0x128>
 8002f6e:	e024      	b.n	8002fba <_vfiprintf_r+0x11a>
 8002f70:	4b50      	ldr	r3, [pc, #320]	; (80030b4 <_vfiprintf_r+0x214>)
 8002f72:	429c      	cmp	r4, r3
 8002f74:	d101      	bne.n	8002f7a <_vfiprintf_r+0xda>
 8002f76:	68b4      	ldr	r4, [r6, #8]
 8002f78:	e7a2      	b.n	8002ec0 <_vfiprintf_r+0x20>
 8002f7a:	4b4f      	ldr	r3, [pc, #316]	; (80030b8 <_vfiprintf_r+0x218>)
 8002f7c:	429c      	cmp	r4, r3
 8002f7e:	bf08      	it	eq
 8002f80:	68f4      	ldreq	r4, [r6, #12]
 8002f82:	e79d      	b.n	8002ec0 <_vfiprintf_r+0x20>
 8002f84:	4621      	mov	r1, r4
 8002f86:	4630      	mov	r0, r6
 8002f88:	f000 fae0 	bl	800354c <__swsetup_r>
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d09d      	beq.n	8002ecc <_vfiprintf_r+0x2c>
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	b01d      	add	sp, #116	; 0x74
 8002f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f9a:	46a8      	mov	r8, r5
 8002f9c:	e7a2      	b.n	8002ee4 <_vfiprintf_r+0x44>
 8002f9e:	4a44      	ldr	r2, [pc, #272]	; (80030b0 <_vfiprintf_r+0x210>)
 8002fa0:	4645      	mov	r5, r8
 8002fa2:	1a80      	subs	r0, r0, r2
 8002fa4:	fa0b f000 	lsl.w	r0, fp, r0
 8002fa8:	4318      	orrs	r0, r3
 8002faa:	9004      	str	r0, [sp, #16]
 8002fac:	e7be      	b.n	8002f2c <_vfiprintf_r+0x8c>
 8002fae:	9a03      	ldr	r2, [sp, #12]
 8002fb0:	1d11      	adds	r1, r2, #4
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	9103      	str	r1, [sp, #12]
 8002fb6:	2a00      	cmp	r2, #0
 8002fb8:	db01      	blt.n	8002fbe <_vfiprintf_r+0x11e>
 8002fba:	9207      	str	r2, [sp, #28]
 8002fbc:	e004      	b.n	8002fc8 <_vfiprintf_r+0x128>
 8002fbe:	4252      	negs	r2, r2
 8002fc0:	f043 0302 	orr.w	r3, r3, #2
 8002fc4:	9207      	str	r2, [sp, #28]
 8002fc6:	9304      	str	r3, [sp, #16]
 8002fc8:	f898 3000 	ldrb.w	r3, [r8]
 8002fcc:	2b2e      	cmp	r3, #46	; 0x2e
 8002fce:	d10e      	bne.n	8002fee <_vfiprintf_r+0x14e>
 8002fd0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8002fd6:	d138      	bne.n	800304a <_vfiprintf_r+0x1aa>
 8002fd8:	9b03      	ldr	r3, [sp, #12]
 8002fda:	f108 0802 	add.w	r8, r8, #2
 8002fde:	1d1a      	adds	r2, r3, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	9203      	str	r2, [sp, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bfb8      	it	lt
 8002fe8:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fec:	9305      	str	r3, [sp, #20]
 8002fee:	4d33      	ldr	r5, [pc, #204]	; (80030bc <_vfiprintf_r+0x21c>)
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	f898 1000 	ldrb.w	r1, [r8]
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	f000 fc4c 	bl	8003894 <memchr>
 8002ffc:	b140      	cbz	r0, 8003010 <_vfiprintf_r+0x170>
 8002ffe:	2340      	movs	r3, #64	; 0x40
 8003000:	1b40      	subs	r0, r0, r5
 8003002:	fa03 f000 	lsl.w	r0, r3, r0
 8003006:	9b04      	ldr	r3, [sp, #16]
 8003008:	f108 0801 	add.w	r8, r8, #1
 800300c:	4303      	orrs	r3, r0
 800300e:	9304      	str	r3, [sp, #16]
 8003010:	f898 1000 	ldrb.w	r1, [r8]
 8003014:	2206      	movs	r2, #6
 8003016:	482a      	ldr	r0, [pc, #168]	; (80030c0 <_vfiprintf_r+0x220>)
 8003018:	f108 0701 	add.w	r7, r8, #1
 800301c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003020:	f000 fc38 	bl	8003894 <memchr>
 8003024:	2800      	cmp	r0, #0
 8003026:	d037      	beq.n	8003098 <_vfiprintf_r+0x1f8>
 8003028:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <_vfiprintf_r+0x224>)
 800302a:	bb1b      	cbnz	r3, 8003074 <_vfiprintf_r+0x1d4>
 800302c:	9b03      	ldr	r3, [sp, #12]
 800302e:	3307      	adds	r3, #7
 8003030:	f023 0307 	bic.w	r3, r3, #7
 8003034:	3308      	adds	r3, #8
 8003036:	9303      	str	r3, [sp, #12]
 8003038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800303a:	444b      	add	r3, r9
 800303c:	9309      	str	r3, [sp, #36]	; 0x24
 800303e:	e750      	b.n	8002ee2 <_vfiprintf_r+0x42>
 8003040:	fb05 3202 	mla	r2, r5, r2, r3
 8003044:	2001      	movs	r0, #1
 8003046:	4688      	mov	r8, r1
 8003048:	e78a      	b.n	8002f60 <_vfiprintf_r+0xc0>
 800304a:	2300      	movs	r3, #0
 800304c:	250a      	movs	r5, #10
 800304e:	4619      	mov	r1, r3
 8003050:	f108 0801 	add.w	r8, r8, #1
 8003054:	9305      	str	r3, [sp, #20]
 8003056:	4640      	mov	r0, r8
 8003058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800305c:	3a30      	subs	r2, #48	; 0x30
 800305e:	2a09      	cmp	r2, #9
 8003060:	d903      	bls.n	800306a <_vfiprintf_r+0x1ca>
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0c3      	beq.n	8002fee <_vfiprintf_r+0x14e>
 8003066:	9105      	str	r1, [sp, #20]
 8003068:	e7c1      	b.n	8002fee <_vfiprintf_r+0x14e>
 800306a:	fb05 2101 	mla	r1, r5, r1, r2
 800306e:	2301      	movs	r3, #1
 8003070:	4680      	mov	r8, r0
 8003072:	e7f0      	b.n	8003056 <_vfiprintf_r+0x1b6>
 8003074:	ab03      	add	r3, sp, #12
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	4622      	mov	r2, r4
 800307a:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <_vfiprintf_r+0x228>)
 800307c:	a904      	add	r1, sp, #16
 800307e:	4630      	mov	r0, r6
 8003080:	f3af 8000 	nop.w
 8003084:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003088:	4681      	mov	r9, r0
 800308a:	d1d5      	bne.n	8003038 <_vfiprintf_r+0x198>
 800308c:	89a3      	ldrh	r3, [r4, #12]
 800308e:	065b      	lsls	r3, r3, #25
 8003090:	f53f af7e 	bmi.w	8002f90 <_vfiprintf_r+0xf0>
 8003094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003096:	e77d      	b.n	8002f94 <_vfiprintf_r+0xf4>
 8003098:	ab03      	add	r3, sp, #12
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	4622      	mov	r2, r4
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <_vfiprintf_r+0x228>)
 80030a0:	a904      	add	r1, sp, #16
 80030a2:	4630      	mov	r0, r6
 80030a4:	f000 f888 	bl	80031b8 <_printf_i>
 80030a8:	e7ec      	b.n	8003084 <_vfiprintf_r+0x1e4>
 80030aa:	bf00      	nop
 80030ac:	08003b20 	.word	0x08003b20
 80030b0:	08003b60 	.word	0x08003b60
 80030b4:	08003b40 	.word	0x08003b40
 80030b8:	08003b00 	.word	0x08003b00
 80030bc:	08003b66 	.word	0x08003b66
 80030c0:	08003b6a 	.word	0x08003b6a
 80030c4:	00000000 	.word	0x00000000
 80030c8:	08002e7b 	.word	0x08002e7b

080030cc <_printf_common>:
 80030cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d0:	4691      	mov	r9, r2
 80030d2:	461f      	mov	r7, r3
 80030d4:	688a      	ldr	r2, [r1, #8]
 80030d6:	690b      	ldr	r3, [r1, #16]
 80030d8:	4606      	mov	r6, r0
 80030da:	4293      	cmp	r3, r2
 80030dc:	bfb8      	it	lt
 80030de:	4613      	movlt	r3, r2
 80030e0:	f8c9 3000 	str.w	r3, [r9]
 80030e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030e8:	460c      	mov	r4, r1
 80030ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030ee:	b112      	cbz	r2, 80030f6 <_printf_common+0x2a>
 80030f0:	3301      	adds	r3, #1
 80030f2:	f8c9 3000 	str.w	r3, [r9]
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	0699      	lsls	r1, r3, #26
 80030fa:	bf42      	ittt	mi
 80030fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003100:	3302      	addmi	r3, #2
 8003102:	f8c9 3000 	strmi.w	r3, [r9]
 8003106:	6825      	ldr	r5, [r4, #0]
 8003108:	f015 0506 	ands.w	r5, r5, #6
 800310c:	d107      	bne.n	800311e <_printf_common+0x52>
 800310e:	f104 0a19 	add.w	sl, r4, #25
 8003112:	68e3      	ldr	r3, [r4, #12]
 8003114:	f8d9 2000 	ldr.w	r2, [r9]
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	42ab      	cmp	r3, r5
 800311c:	dc29      	bgt.n	8003172 <_printf_common+0xa6>
 800311e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003122:	6822      	ldr	r2, [r4, #0]
 8003124:	3300      	adds	r3, #0
 8003126:	bf18      	it	ne
 8003128:	2301      	movne	r3, #1
 800312a:	0692      	lsls	r2, r2, #26
 800312c:	d42e      	bmi.n	800318c <_printf_common+0xc0>
 800312e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003132:	4639      	mov	r1, r7
 8003134:	4630      	mov	r0, r6
 8003136:	47c0      	blx	r8
 8003138:	3001      	adds	r0, #1
 800313a:	d021      	beq.n	8003180 <_printf_common+0xb4>
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	68e5      	ldr	r5, [r4, #12]
 8003140:	f003 0306 	and.w	r3, r3, #6
 8003144:	2b04      	cmp	r3, #4
 8003146:	bf18      	it	ne
 8003148:	2500      	movne	r5, #0
 800314a:	f8d9 2000 	ldr.w	r2, [r9]
 800314e:	f04f 0900 	mov.w	r9, #0
 8003152:	bf08      	it	eq
 8003154:	1aad      	subeq	r5, r5, r2
 8003156:	68a3      	ldr	r3, [r4, #8]
 8003158:	6922      	ldr	r2, [r4, #16]
 800315a:	bf08      	it	eq
 800315c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003160:	4293      	cmp	r3, r2
 8003162:	bfc4      	itt	gt
 8003164:	1a9b      	subgt	r3, r3, r2
 8003166:	18ed      	addgt	r5, r5, r3
 8003168:	341a      	adds	r4, #26
 800316a:	454d      	cmp	r5, r9
 800316c:	d11a      	bne.n	80031a4 <_printf_common+0xd8>
 800316e:	2000      	movs	r0, #0
 8003170:	e008      	b.n	8003184 <_printf_common+0xb8>
 8003172:	2301      	movs	r3, #1
 8003174:	4652      	mov	r2, sl
 8003176:	4639      	mov	r1, r7
 8003178:	4630      	mov	r0, r6
 800317a:	47c0      	blx	r8
 800317c:	3001      	adds	r0, #1
 800317e:	d103      	bne.n	8003188 <_printf_common+0xbc>
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003188:	3501      	adds	r5, #1
 800318a:	e7c2      	b.n	8003112 <_printf_common+0x46>
 800318c:	2030      	movs	r0, #48	; 0x30
 800318e:	18e1      	adds	r1, r4, r3
 8003190:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800319a:	4422      	add	r2, r4
 800319c:	3302      	adds	r3, #2
 800319e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031a2:	e7c4      	b.n	800312e <_printf_common+0x62>
 80031a4:	2301      	movs	r3, #1
 80031a6:	4622      	mov	r2, r4
 80031a8:	4639      	mov	r1, r7
 80031aa:	4630      	mov	r0, r6
 80031ac:	47c0      	blx	r8
 80031ae:	3001      	adds	r0, #1
 80031b0:	d0e6      	beq.n	8003180 <_printf_common+0xb4>
 80031b2:	f109 0901 	add.w	r9, r9, #1
 80031b6:	e7d8      	b.n	800316a <_printf_common+0x9e>

080031b8 <_printf_i>:
 80031b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80031c0:	460c      	mov	r4, r1
 80031c2:	7e09      	ldrb	r1, [r1, #24]
 80031c4:	b085      	sub	sp, #20
 80031c6:	296e      	cmp	r1, #110	; 0x6e
 80031c8:	4617      	mov	r7, r2
 80031ca:	4606      	mov	r6, r0
 80031cc:	4698      	mov	r8, r3
 80031ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80031d0:	f000 80b3 	beq.w	800333a <_printf_i+0x182>
 80031d4:	d822      	bhi.n	800321c <_printf_i+0x64>
 80031d6:	2963      	cmp	r1, #99	; 0x63
 80031d8:	d036      	beq.n	8003248 <_printf_i+0x90>
 80031da:	d80a      	bhi.n	80031f2 <_printf_i+0x3a>
 80031dc:	2900      	cmp	r1, #0
 80031de:	f000 80b9 	beq.w	8003354 <_printf_i+0x19c>
 80031e2:	2958      	cmp	r1, #88	; 0x58
 80031e4:	f000 8083 	beq.w	80032ee <_printf_i+0x136>
 80031e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80031f0:	e032      	b.n	8003258 <_printf_i+0xa0>
 80031f2:	2964      	cmp	r1, #100	; 0x64
 80031f4:	d001      	beq.n	80031fa <_printf_i+0x42>
 80031f6:	2969      	cmp	r1, #105	; 0x69
 80031f8:	d1f6      	bne.n	80031e8 <_printf_i+0x30>
 80031fa:	6820      	ldr	r0, [r4, #0]
 80031fc:	6813      	ldr	r3, [r2, #0]
 80031fe:	0605      	lsls	r5, r0, #24
 8003200:	f103 0104 	add.w	r1, r3, #4
 8003204:	d52a      	bpl.n	800325c <_printf_i+0xa4>
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6011      	str	r1, [r2, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	da03      	bge.n	8003216 <_printf_i+0x5e>
 800320e:	222d      	movs	r2, #45	; 0x2d
 8003210:	425b      	negs	r3, r3
 8003212:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003216:	486f      	ldr	r0, [pc, #444]	; (80033d4 <_printf_i+0x21c>)
 8003218:	220a      	movs	r2, #10
 800321a:	e039      	b.n	8003290 <_printf_i+0xd8>
 800321c:	2973      	cmp	r1, #115	; 0x73
 800321e:	f000 809d 	beq.w	800335c <_printf_i+0x1a4>
 8003222:	d808      	bhi.n	8003236 <_printf_i+0x7e>
 8003224:	296f      	cmp	r1, #111	; 0x6f
 8003226:	d020      	beq.n	800326a <_printf_i+0xb2>
 8003228:	2970      	cmp	r1, #112	; 0x70
 800322a:	d1dd      	bne.n	80031e8 <_printf_i+0x30>
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	f043 0320 	orr.w	r3, r3, #32
 8003232:	6023      	str	r3, [r4, #0]
 8003234:	e003      	b.n	800323e <_printf_i+0x86>
 8003236:	2975      	cmp	r1, #117	; 0x75
 8003238:	d017      	beq.n	800326a <_printf_i+0xb2>
 800323a:	2978      	cmp	r1, #120	; 0x78
 800323c:	d1d4      	bne.n	80031e8 <_printf_i+0x30>
 800323e:	2378      	movs	r3, #120	; 0x78
 8003240:	4865      	ldr	r0, [pc, #404]	; (80033d8 <_printf_i+0x220>)
 8003242:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003246:	e055      	b.n	80032f4 <_printf_i+0x13c>
 8003248:	6813      	ldr	r3, [r2, #0]
 800324a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800324e:	1d19      	adds	r1, r3, #4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6011      	str	r1, [r2, #0]
 8003254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003258:	2301      	movs	r3, #1
 800325a:	e08c      	b.n	8003376 <_printf_i+0x1be>
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003262:	6011      	str	r1, [r2, #0]
 8003264:	bf18      	it	ne
 8003266:	b21b      	sxthne	r3, r3
 8003268:	e7cf      	b.n	800320a <_printf_i+0x52>
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	6825      	ldr	r5, [r4, #0]
 800326e:	1d18      	adds	r0, r3, #4
 8003270:	6010      	str	r0, [r2, #0]
 8003272:	0628      	lsls	r0, r5, #24
 8003274:	d501      	bpl.n	800327a <_printf_i+0xc2>
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	e002      	b.n	8003280 <_printf_i+0xc8>
 800327a:	0668      	lsls	r0, r5, #25
 800327c:	d5fb      	bpl.n	8003276 <_printf_i+0xbe>
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	296f      	cmp	r1, #111	; 0x6f
 8003282:	bf14      	ite	ne
 8003284:	220a      	movne	r2, #10
 8003286:	2208      	moveq	r2, #8
 8003288:	4852      	ldr	r0, [pc, #328]	; (80033d4 <_printf_i+0x21c>)
 800328a:	2100      	movs	r1, #0
 800328c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003290:	6865      	ldr	r5, [r4, #4]
 8003292:	2d00      	cmp	r5, #0
 8003294:	60a5      	str	r5, [r4, #8]
 8003296:	f2c0 8095 	blt.w	80033c4 <_printf_i+0x20c>
 800329a:	6821      	ldr	r1, [r4, #0]
 800329c:	f021 0104 	bic.w	r1, r1, #4
 80032a0:	6021      	str	r1, [r4, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d13d      	bne.n	8003322 <_printf_i+0x16a>
 80032a6:	2d00      	cmp	r5, #0
 80032a8:	f040 808e 	bne.w	80033c8 <_printf_i+0x210>
 80032ac:	4665      	mov	r5, ip
 80032ae:	2a08      	cmp	r2, #8
 80032b0:	d10b      	bne.n	80032ca <_printf_i+0x112>
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	07db      	lsls	r3, r3, #31
 80032b6:	d508      	bpl.n	80032ca <_printf_i+0x112>
 80032b8:	6923      	ldr	r3, [r4, #16]
 80032ba:	6862      	ldr	r2, [r4, #4]
 80032bc:	429a      	cmp	r2, r3
 80032be:	bfde      	ittt	le
 80032c0:	2330      	movle	r3, #48	; 0x30
 80032c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032ca:	ebac 0305 	sub.w	r3, ip, r5
 80032ce:	6123      	str	r3, [r4, #16]
 80032d0:	f8cd 8000 	str.w	r8, [sp]
 80032d4:	463b      	mov	r3, r7
 80032d6:	aa03      	add	r2, sp, #12
 80032d8:	4621      	mov	r1, r4
 80032da:	4630      	mov	r0, r6
 80032dc:	f7ff fef6 	bl	80030cc <_printf_common>
 80032e0:	3001      	adds	r0, #1
 80032e2:	d14d      	bne.n	8003380 <_printf_i+0x1c8>
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	b005      	add	sp, #20
 80032ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032ee:	4839      	ldr	r0, [pc, #228]	; (80033d4 <_printf_i+0x21c>)
 80032f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80032f4:	6813      	ldr	r3, [r2, #0]
 80032f6:	6821      	ldr	r1, [r4, #0]
 80032f8:	1d1d      	adds	r5, r3, #4
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6015      	str	r5, [r2, #0]
 80032fe:	060a      	lsls	r2, r1, #24
 8003300:	d50b      	bpl.n	800331a <_printf_i+0x162>
 8003302:	07ca      	lsls	r2, r1, #31
 8003304:	bf44      	itt	mi
 8003306:	f041 0120 	orrmi.w	r1, r1, #32
 800330a:	6021      	strmi	r1, [r4, #0]
 800330c:	b91b      	cbnz	r3, 8003316 <_printf_i+0x15e>
 800330e:	6822      	ldr	r2, [r4, #0]
 8003310:	f022 0220 	bic.w	r2, r2, #32
 8003314:	6022      	str	r2, [r4, #0]
 8003316:	2210      	movs	r2, #16
 8003318:	e7b7      	b.n	800328a <_printf_i+0xd2>
 800331a:	064d      	lsls	r5, r1, #25
 800331c:	bf48      	it	mi
 800331e:	b29b      	uxthmi	r3, r3
 8003320:	e7ef      	b.n	8003302 <_printf_i+0x14a>
 8003322:	4665      	mov	r5, ip
 8003324:	fbb3 f1f2 	udiv	r1, r3, r2
 8003328:	fb02 3311 	mls	r3, r2, r1, r3
 800332c:	5cc3      	ldrb	r3, [r0, r3]
 800332e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003332:	460b      	mov	r3, r1
 8003334:	2900      	cmp	r1, #0
 8003336:	d1f5      	bne.n	8003324 <_printf_i+0x16c>
 8003338:	e7b9      	b.n	80032ae <_printf_i+0xf6>
 800333a:	6813      	ldr	r3, [r2, #0]
 800333c:	6825      	ldr	r5, [r4, #0]
 800333e:	1d18      	adds	r0, r3, #4
 8003340:	6961      	ldr	r1, [r4, #20]
 8003342:	6010      	str	r0, [r2, #0]
 8003344:	0628      	lsls	r0, r5, #24
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	d501      	bpl.n	800334e <_printf_i+0x196>
 800334a:	6019      	str	r1, [r3, #0]
 800334c:	e002      	b.n	8003354 <_printf_i+0x19c>
 800334e:	066a      	lsls	r2, r5, #25
 8003350:	d5fb      	bpl.n	800334a <_printf_i+0x192>
 8003352:	8019      	strh	r1, [r3, #0]
 8003354:	2300      	movs	r3, #0
 8003356:	4665      	mov	r5, ip
 8003358:	6123      	str	r3, [r4, #16]
 800335a:	e7b9      	b.n	80032d0 <_printf_i+0x118>
 800335c:	6813      	ldr	r3, [r2, #0]
 800335e:	1d19      	adds	r1, r3, #4
 8003360:	6011      	str	r1, [r2, #0]
 8003362:	681d      	ldr	r5, [r3, #0]
 8003364:	6862      	ldr	r2, [r4, #4]
 8003366:	2100      	movs	r1, #0
 8003368:	4628      	mov	r0, r5
 800336a:	f000 fa93 	bl	8003894 <memchr>
 800336e:	b108      	cbz	r0, 8003374 <_printf_i+0x1bc>
 8003370:	1b40      	subs	r0, r0, r5
 8003372:	6060      	str	r0, [r4, #4]
 8003374:	6863      	ldr	r3, [r4, #4]
 8003376:	6123      	str	r3, [r4, #16]
 8003378:	2300      	movs	r3, #0
 800337a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800337e:	e7a7      	b.n	80032d0 <_printf_i+0x118>
 8003380:	6923      	ldr	r3, [r4, #16]
 8003382:	462a      	mov	r2, r5
 8003384:	4639      	mov	r1, r7
 8003386:	4630      	mov	r0, r6
 8003388:	47c0      	blx	r8
 800338a:	3001      	adds	r0, #1
 800338c:	d0aa      	beq.n	80032e4 <_printf_i+0x12c>
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	079b      	lsls	r3, r3, #30
 8003392:	d413      	bmi.n	80033bc <_printf_i+0x204>
 8003394:	68e0      	ldr	r0, [r4, #12]
 8003396:	9b03      	ldr	r3, [sp, #12]
 8003398:	4298      	cmp	r0, r3
 800339a:	bfb8      	it	lt
 800339c:	4618      	movlt	r0, r3
 800339e:	e7a3      	b.n	80032e8 <_printf_i+0x130>
 80033a0:	2301      	movs	r3, #1
 80033a2:	464a      	mov	r2, r9
 80033a4:	4639      	mov	r1, r7
 80033a6:	4630      	mov	r0, r6
 80033a8:	47c0      	blx	r8
 80033aa:	3001      	adds	r0, #1
 80033ac:	d09a      	beq.n	80032e4 <_printf_i+0x12c>
 80033ae:	3501      	adds	r5, #1
 80033b0:	68e3      	ldr	r3, [r4, #12]
 80033b2:	9a03      	ldr	r2, [sp, #12]
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	42ab      	cmp	r3, r5
 80033b8:	dcf2      	bgt.n	80033a0 <_printf_i+0x1e8>
 80033ba:	e7eb      	b.n	8003394 <_printf_i+0x1dc>
 80033bc:	2500      	movs	r5, #0
 80033be:	f104 0919 	add.w	r9, r4, #25
 80033c2:	e7f5      	b.n	80033b0 <_printf_i+0x1f8>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ac      	bne.n	8003322 <_printf_i+0x16a>
 80033c8:	7803      	ldrb	r3, [r0, #0]
 80033ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033d2:	e76c      	b.n	80032ae <_printf_i+0xf6>
 80033d4:	08003b71 	.word	0x08003b71
 80033d8:	08003b82 	.word	0x08003b82

080033dc <_sbrk_r>:
 80033dc:	b538      	push	{r3, r4, r5, lr}
 80033de:	2300      	movs	r3, #0
 80033e0:	4c05      	ldr	r4, [pc, #20]	; (80033f8 <_sbrk_r+0x1c>)
 80033e2:	4605      	mov	r5, r0
 80033e4:	4608      	mov	r0, r1
 80033e6:	6023      	str	r3, [r4, #0]
 80033e8:	f7fd fcaa 	bl	8000d40 <_sbrk>
 80033ec:	1c43      	adds	r3, r0, #1
 80033ee:	d102      	bne.n	80033f6 <_sbrk_r+0x1a>
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	b103      	cbz	r3, 80033f6 <_sbrk_r+0x1a>
 80033f4:	602b      	str	r3, [r5, #0]
 80033f6:	bd38      	pop	{r3, r4, r5, pc}
 80033f8:	20000200 	.word	0x20000200

080033fc <__sread>:
 80033fc:	b510      	push	{r4, lr}
 80033fe:	460c      	mov	r4, r1
 8003400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003404:	f000 faa2 	bl	800394c <_read_r>
 8003408:	2800      	cmp	r0, #0
 800340a:	bfab      	itete	ge
 800340c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800340e:	89a3      	ldrhlt	r3, [r4, #12]
 8003410:	181b      	addge	r3, r3, r0
 8003412:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003416:	bfac      	ite	ge
 8003418:	6563      	strge	r3, [r4, #84]	; 0x54
 800341a:	81a3      	strhlt	r3, [r4, #12]
 800341c:	bd10      	pop	{r4, pc}

0800341e <__swrite>:
 800341e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003422:	461f      	mov	r7, r3
 8003424:	898b      	ldrh	r3, [r1, #12]
 8003426:	4605      	mov	r5, r0
 8003428:	05db      	lsls	r3, r3, #23
 800342a:	460c      	mov	r4, r1
 800342c:	4616      	mov	r6, r2
 800342e:	d505      	bpl.n	800343c <__swrite+0x1e>
 8003430:	2302      	movs	r3, #2
 8003432:	2200      	movs	r2, #0
 8003434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003438:	f000 f9b6 	bl	80037a8 <_lseek_r>
 800343c:	89a3      	ldrh	r3, [r4, #12]
 800343e:	4632      	mov	r2, r6
 8003440:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003444:	81a3      	strh	r3, [r4, #12]
 8003446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800344a:	463b      	mov	r3, r7
 800344c:	4628      	mov	r0, r5
 800344e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003452:	f000 b869 	b.w	8003528 <_write_r>

08003456 <__sseek>:
 8003456:	b510      	push	{r4, lr}
 8003458:	460c      	mov	r4, r1
 800345a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800345e:	f000 f9a3 	bl	80037a8 <_lseek_r>
 8003462:	1c43      	adds	r3, r0, #1
 8003464:	89a3      	ldrh	r3, [r4, #12]
 8003466:	bf15      	itete	ne
 8003468:	6560      	strne	r0, [r4, #84]	; 0x54
 800346a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800346e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003472:	81a3      	strheq	r3, [r4, #12]
 8003474:	bf18      	it	ne
 8003476:	81a3      	strhne	r3, [r4, #12]
 8003478:	bd10      	pop	{r4, pc}

0800347a <__sclose>:
 800347a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800347e:	f000 b8d3 	b.w	8003628 <_close_r>
	...

08003484 <__swbuf_r>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	460e      	mov	r6, r1
 8003488:	4614      	mov	r4, r2
 800348a:	4605      	mov	r5, r0
 800348c:	b118      	cbz	r0, 8003496 <__swbuf_r+0x12>
 800348e:	6983      	ldr	r3, [r0, #24]
 8003490:	b90b      	cbnz	r3, 8003496 <__swbuf_r+0x12>
 8003492:	f7ff fbf9 	bl	8002c88 <__sinit>
 8003496:	4b21      	ldr	r3, [pc, #132]	; (800351c <__swbuf_r+0x98>)
 8003498:	429c      	cmp	r4, r3
 800349a:	d12a      	bne.n	80034f2 <__swbuf_r+0x6e>
 800349c:	686c      	ldr	r4, [r5, #4]
 800349e:	69a3      	ldr	r3, [r4, #24]
 80034a0:	60a3      	str	r3, [r4, #8]
 80034a2:	89a3      	ldrh	r3, [r4, #12]
 80034a4:	071a      	lsls	r2, r3, #28
 80034a6:	d52e      	bpl.n	8003506 <__swbuf_r+0x82>
 80034a8:	6923      	ldr	r3, [r4, #16]
 80034aa:	b363      	cbz	r3, 8003506 <__swbuf_r+0x82>
 80034ac:	6923      	ldr	r3, [r4, #16]
 80034ae:	6820      	ldr	r0, [r4, #0]
 80034b0:	b2f6      	uxtb	r6, r6
 80034b2:	1ac0      	subs	r0, r0, r3
 80034b4:	6963      	ldr	r3, [r4, #20]
 80034b6:	4637      	mov	r7, r6
 80034b8:	4283      	cmp	r3, r0
 80034ba:	dc04      	bgt.n	80034c6 <__swbuf_r+0x42>
 80034bc:	4621      	mov	r1, r4
 80034be:	4628      	mov	r0, r5
 80034c0:	f000 f948 	bl	8003754 <_fflush_r>
 80034c4:	bb28      	cbnz	r0, 8003512 <__swbuf_r+0x8e>
 80034c6:	68a3      	ldr	r3, [r4, #8]
 80034c8:	3001      	adds	r0, #1
 80034ca:	3b01      	subs	r3, #1
 80034cc:	60a3      	str	r3, [r4, #8]
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	6022      	str	r2, [r4, #0]
 80034d4:	701e      	strb	r6, [r3, #0]
 80034d6:	6963      	ldr	r3, [r4, #20]
 80034d8:	4283      	cmp	r3, r0
 80034da:	d004      	beq.n	80034e6 <__swbuf_r+0x62>
 80034dc:	89a3      	ldrh	r3, [r4, #12]
 80034de:	07db      	lsls	r3, r3, #31
 80034e0:	d519      	bpl.n	8003516 <__swbuf_r+0x92>
 80034e2:	2e0a      	cmp	r6, #10
 80034e4:	d117      	bne.n	8003516 <__swbuf_r+0x92>
 80034e6:	4621      	mov	r1, r4
 80034e8:	4628      	mov	r0, r5
 80034ea:	f000 f933 	bl	8003754 <_fflush_r>
 80034ee:	b190      	cbz	r0, 8003516 <__swbuf_r+0x92>
 80034f0:	e00f      	b.n	8003512 <__swbuf_r+0x8e>
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <__swbuf_r+0x9c>)
 80034f4:	429c      	cmp	r4, r3
 80034f6:	d101      	bne.n	80034fc <__swbuf_r+0x78>
 80034f8:	68ac      	ldr	r4, [r5, #8]
 80034fa:	e7d0      	b.n	800349e <__swbuf_r+0x1a>
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <__swbuf_r+0xa0>)
 80034fe:	429c      	cmp	r4, r3
 8003500:	bf08      	it	eq
 8003502:	68ec      	ldreq	r4, [r5, #12]
 8003504:	e7cb      	b.n	800349e <__swbuf_r+0x1a>
 8003506:	4621      	mov	r1, r4
 8003508:	4628      	mov	r0, r5
 800350a:	f000 f81f 	bl	800354c <__swsetup_r>
 800350e:	2800      	cmp	r0, #0
 8003510:	d0cc      	beq.n	80034ac <__swbuf_r+0x28>
 8003512:	f04f 37ff 	mov.w	r7, #4294967295
 8003516:	4638      	mov	r0, r7
 8003518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800351a:	bf00      	nop
 800351c:	08003b20 	.word	0x08003b20
 8003520:	08003b40 	.word	0x08003b40
 8003524:	08003b00 	.word	0x08003b00

08003528 <_write_r>:
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	4605      	mov	r5, r0
 800352c:	4608      	mov	r0, r1
 800352e:	4611      	mov	r1, r2
 8003530:	2200      	movs	r2, #0
 8003532:	4c05      	ldr	r4, [pc, #20]	; (8003548 <_write_r+0x20>)
 8003534:	6022      	str	r2, [r4, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	f7fd fbb5 	bl	8000ca6 <_write>
 800353c:	1c43      	adds	r3, r0, #1
 800353e:	d102      	bne.n	8003546 <_write_r+0x1e>
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	b103      	cbz	r3, 8003546 <_write_r+0x1e>
 8003544:	602b      	str	r3, [r5, #0]
 8003546:	bd38      	pop	{r3, r4, r5, pc}
 8003548:	20000200 	.word	0x20000200

0800354c <__swsetup_r>:
 800354c:	4b32      	ldr	r3, [pc, #200]	; (8003618 <__swsetup_r+0xcc>)
 800354e:	b570      	push	{r4, r5, r6, lr}
 8003550:	681d      	ldr	r5, [r3, #0]
 8003552:	4606      	mov	r6, r0
 8003554:	460c      	mov	r4, r1
 8003556:	b125      	cbz	r5, 8003562 <__swsetup_r+0x16>
 8003558:	69ab      	ldr	r3, [r5, #24]
 800355a:	b913      	cbnz	r3, 8003562 <__swsetup_r+0x16>
 800355c:	4628      	mov	r0, r5
 800355e:	f7ff fb93 	bl	8002c88 <__sinit>
 8003562:	4b2e      	ldr	r3, [pc, #184]	; (800361c <__swsetup_r+0xd0>)
 8003564:	429c      	cmp	r4, r3
 8003566:	d10f      	bne.n	8003588 <__swsetup_r+0x3c>
 8003568:	686c      	ldr	r4, [r5, #4]
 800356a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800356e:	b29a      	uxth	r2, r3
 8003570:	0715      	lsls	r5, r2, #28
 8003572:	d42c      	bmi.n	80035ce <__swsetup_r+0x82>
 8003574:	06d0      	lsls	r0, r2, #27
 8003576:	d411      	bmi.n	800359c <__swsetup_r+0x50>
 8003578:	2209      	movs	r2, #9
 800357a:	6032      	str	r2, [r6, #0]
 800357c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003580:	81a3      	strh	r3, [r4, #12]
 8003582:	f04f 30ff 	mov.w	r0, #4294967295
 8003586:	e03e      	b.n	8003606 <__swsetup_r+0xba>
 8003588:	4b25      	ldr	r3, [pc, #148]	; (8003620 <__swsetup_r+0xd4>)
 800358a:	429c      	cmp	r4, r3
 800358c:	d101      	bne.n	8003592 <__swsetup_r+0x46>
 800358e:	68ac      	ldr	r4, [r5, #8]
 8003590:	e7eb      	b.n	800356a <__swsetup_r+0x1e>
 8003592:	4b24      	ldr	r3, [pc, #144]	; (8003624 <__swsetup_r+0xd8>)
 8003594:	429c      	cmp	r4, r3
 8003596:	bf08      	it	eq
 8003598:	68ec      	ldreq	r4, [r5, #12]
 800359a:	e7e6      	b.n	800356a <__swsetup_r+0x1e>
 800359c:	0751      	lsls	r1, r2, #29
 800359e:	d512      	bpl.n	80035c6 <__swsetup_r+0x7a>
 80035a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035a2:	b141      	cbz	r1, 80035b6 <__swsetup_r+0x6a>
 80035a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035a8:	4299      	cmp	r1, r3
 80035aa:	d002      	beq.n	80035b2 <__swsetup_r+0x66>
 80035ac:	4630      	mov	r0, r6
 80035ae:	f000 f981 	bl	80038b4 <_free_r>
 80035b2:	2300      	movs	r3, #0
 80035b4:	6363      	str	r3, [r4, #52]	; 0x34
 80035b6:	89a3      	ldrh	r3, [r4, #12]
 80035b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035bc:	81a3      	strh	r3, [r4, #12]
 80035be:	2300      	movs	r3, #0
 80035c0:	6063      	str	r3, [r4, #4]
 80035c2:	6923      	ldr	r3, [r4, #16]
 80035c4:	6023      	str	r3, [r4, #0]
 80035c6:	89a3      	ldrh	r3, [r4, #12]
 80035c8:	f043 0308 	orr.w	r3, r3, #8
 80035cc:	81a3      	strh	r3, [r4, #12]
 80035ce:	6923      	ldr	r3, [r4, #16]
 80035d0:	b94b      	cbnz	r3, 80035e6 <__swsetup_r+0x9a>
 80035d2:	89a3      	ldrh	r3, [r4, #12]
 80035d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035dc:	d003      	beq.n	80035e6 <__swsetup_r+0x9a>
 80035de:	4621      	mov	r1, r4
 80035e0:	4630      	mov	r0, r6
 80035e2:	f000 f917 	bl	8003814 <__smakebuf_r>
 80035e6:	89a2      	ldrh	r2, [r4, #12]
 80035e8:	f012 0301 	ands.w	r3, r2, #1
 80035ec:	d00c      	beq.n	8003608 <__swsetup_r+0xbc>
 80035ee:	2300      	movs	r3, #0
 80035f0:	60a3      	str	r3, [r4, #8]
 80035f2:	6963      	ldr	r3, [r4, #20]
 80035f4:	425b      	negs	r3, r3
 80035f6:	61a3      	str	r3, [r4, #24]
 80035f8:	6923      	ldr	r3, [r4, #16]
 80035fa:	b953      	cbnz	r3, 8003612 <__swsetup_r+0xc6>
 80035fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003600:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003604:	d1ba      	bne.n	800357c <__swsetup_r+0x30>
 8003606:	bd70      	pop	{r4, r5, r6, pc}
 8003608:	0792      	lsls	r2, r2, #30
 800360a:	bf58      	it	pl
 800360c:	6963      	ldrpl	r3, [r4, #20]
 800360e:	60a3      	str	r3, [r4, #8]
 8003610:	e7f2      	b.n	80035f8 <__swsetup_r+0xac>
 8003612:	2000      	movs	r0, #0
 8003614:	e7f7      	b.n	8003606 <__swsetup_r+0xba>
 8003616:	bf00      	nop
 8003618:	2000000c 	.word	0x2000000c
 800361c:	08003b20 	.word	0x08003b20
 8003620:	08003b40 	.word	0x08003b40
 8003624:	08003b00 	.word	0x08003b00

08003628 <_close_r>:
 8003628:	b538      	push	{r3, r4, r5, lr}
 800362a:	2300      	movs	r3, #0
 800362c:	4c05      	ldr	r4, [pc, #20]	; (8003644 <_close_r+0x1c>)
 800362e:	4605      	mov	r5, r0
 8003630:	4608      	mov	r0, r1
 8003632:	6023      	str	r3, [r4, #0]
 8003634:	f7fd fb53 	bl	8000cde <_close>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d102      	bne.n	8003642 <_close_r+0x1a>
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	b103      	cbz	r3, 8003642 <_close_r+0x1a>
 8003640:	602b      	str	r3, [r5, #0]
 8003642:	bd38      	pop	{r3, r4, r5, pc}
 8003644:	20000200 	.word	0x20000200

08003648 <__sflush_r>:
 8003648:	898a      	ldrh	r2, [r1, #12]
 800364a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800364e:	4605      	mov	r5, r0
 8003650:	0710      	lsls	r0, r2, #28
 8003652:	460c      	mov	r4, r1
 8003654:	d458      	bmi.n	8003708 <__sflush_r+0xc0>
 8003656:	684b      	ldr	r3, [r1, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	dc05      	bgt.n	8003668 <__sflush_r+0x20>
 800365c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	dc02      	bgt.n	8003668 <__sflush_r+0x20>
 8003662:	2000      	movs	r0, #0
 8003664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800366a:	2e00      	cmp	r6, #0
 800366c:	d0f9      	beq.n	8003662 <__sflush_r+0x1a>
 800366e:	2300      	movs	r3, #0
 8003670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003674:	682f      	ldr	r7, [r5, #0]
 8003676:	6a21      	ldr	r1, [r4, #32]
 8003678:	602b      	str	r3, [r5, #0]
 800367a:	d032      	beq.n	80036e2 <__sflush_r+0x9a>
 800367c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	075a      	lsls	r2, r3, #29
 8003682:	d505      	bpl.n	8003690 <__sflush_r+0x48>
 8003684:	6863      	ldr	r3, [r4, #4]
 8003686:	1ac0      	subs	r0, r0, r3
 8003688:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800368a:	b10b      	cbz	r3, 8003690 <__sflush_r+0x48>
 800368c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800368e:	1ac0      	subs	r0, r0, r3
 8003690:	2300      	movs	r3, #0
 8003692:	4602      	mov	r2, r0
 8003694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003696:	6a21      	ldr	r1, [r4, #32]
 8003698:	4628      	mov	r0, r5
 800369a:	47b0      	blx	r6
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	89a3      	ldrh	r3, [r4, #12]
 80036a0:	d106      	bne.n	80036b0 <__sflush_r+0x68>
 80036a2:	6829      	ldr	r1, [r5, #0]
 80036a4:	291d      	cmp	r1, #29
 80036a6:	d848      	bhi.n	800373a <__sflush_r+0xf2>
 80036a8:	4a29      	ldr	r2, [pc, #164]	; (8003750 <__sflush_r+0x108>)
 80036aa:	40ca      	lsrs	r2, r1
 80036ac:	07d6      	lsls	r6, r2, #31
 80036ae:	d544      	bpl.n	800373a <__sflush_r+0xf2>
 80036b0:	2200      	movs	r2, #0
 80036b2:	6062      	str	r2, [r4, #4]
 80036b4:	6922      	ldr	r2, [r4, #16]
 80036b6:	04d9      	lsls	r1, r3, #19
 80036b8:	6022      	str	r2, [r4, #0]
 80036ba:	d504      	bpl.n	80036c6 <__sflush_r+0x7e>
 80036bc:	1c42      	adds	r2, r0, #1
 80036be:	d101      	bne.n	80036c4 <__sflush_r+0x7c>
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	b903      	cbnz	r3, 80036c6 <__sflush_r+0x7e>
 80036c4:	6560      	str	r0, [r4, #84]	; 0x54
 80036c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036c8:	602f      	str	r7, [r5, #0]
 80036ca:	2900      	cmp	r1, #0
 80036cc:	d0c9      	beq.n	8003662 <__sflush_r+0x1a>
 80036ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036d2:	4299      	cmp	r1, r3
 80036d4:	d002      	beq.n	80036dc <__sflush_r+0x94>
 80036d6:	4628      	mov	r0, r5
 80036d8:	f000 f8ec 	bl	80038b4 <_free_r>
 80036dc:	2000      	movs	r0, #0
 80036de:	6360      	str	r0, [r4, #52]	; 0x34
 80036e0:	e7c0      	b.n	8003664 <__sflush_r+0x1c>
 80036e2:	2301      	movs	r3, #1
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b0      	blx	r6
 80036e8:	1c41      	adds	r1, r0, #1
 80036ea:	d1c8      	bne.n	800367e <__sflush_r+0x36>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0c5      	beq.n	800367e <__sflush_r+0x36>
 80036f2:	2b1d      	cmp	r3, #29
 80036f4:	d001      	beq.n	80036fa <__sflush_r+0xb2>
 80036f6:	2b16      	cmp	r3, #22
 80036f8:	d101      	bne.n	80036fe <__sflush_r+0xb6>
 80036fa:	602f      	str	r7, [r5, #0]
 80036fc:	e7b1      	b.n	8003662 <__sflush_r+0x1a>
 80036fe:	89a3      	ldrh	r3, [r4, #12]
 8003700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003704:	81a3      	strh	r3, [r4, #12]
 8003706:	e7ad      	b.n	8003664 <__sflush_r+0x1c>
 8003708:	690f      	ldr	r7, [r1, #16]
 800370a:	2f00      	cmp	r7, #0
 800370c:	d0a9      	beq.n	8003662 <__sflush_r+0x1a>
 800370e:	0793      	lsls	r3, r2, #30
 8003710:	bf18      	it	ne
 8003712:	2300      	movne	r3, #0
 8003714:	680e      	ldr	r6, [r1, #0]
 8003716:	bf08      	it	eq
 8003718:	694b      	ldreq	r3, [r1, #20]
 800371a:	eba6 0807 	sub.w	r8, r6, r7
 800371e:	600f      	str	r7, [r1, #0]
 8003720:	608b      	str	r3, [r1, #8]
 8003722:	f1b8 0f00 	cmp.w	r8, #0
 8003726:	dd9c      	ble.n	8003662 <__sflush_r+0x1a>
 8003728:	4643      	mov	r3, r8
 800372a:	463a      	mov	r2, r7
 800372c:	6a21      	ldr	r1, [r4, #32]
 800372e:	4628      	mov	r0, r5
 8003730:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003732:	47b0      	blx	r6
 8003734:	2800      	cmp	r0, #0
 8003736:	dc06      	bgt.n	8003746 <__sflush_r+0xfe>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800373e:	81a3      	strh	r3, [r4, #12]
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	e78e      	b.n	8003664 <__sflush_r+0x1c>
 8003746:	4407      	add	r7, r0
 8003748:	eba8 0800 	sub.w	r8, r8, r0
 800374c:	e7e9      	b.n	8003722 <__sflush_r+0xda>
 800374e:	bf00      	nop
 8003750:	20400001 	.word	0x20400001

08003754 <_fflush_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	690b      	ldr	r3, [r1, #16]
 8003758:	4605      	mov	r5, r0
 800375a:	460c      	mov	r4, r1
 800375c:	b1db      	cbz	r3, 8003796 <_fflush_r+0x42>
 800375e:	b118      	cbz	r0, 8003768 <_fflush_r+0x14>
 8003760:	6983      	ldr	r3, [r0, #24]
 8003762:	b90b      	cbnz	r3, 8003768 <_fflush_r+0x14>
 8003764:	f7ff fa90 	bl	8002c88 <__sinit>
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <_fflush_r+0x48>)
 800376a:	429c      	cmp	r4, r3
 800376c:	d109      	bne.n	8003782 <_fflush_r+0x2e>
 800376e:	686c      	ldr	r4, [r5, #4]
 8003770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003774:	b17b      	cbz	r3, 8003796 <_fflush_r+0x42>
 8003776:	4621      	mov	r1, r4
 8003778:	4628      	mov	r0, r5
 800377a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800377e:	f7ff bf63 	b.w	8003648 <__sflush_r>
 8003782:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <_fflush_r+0x4c>)
 8003784:	429c      	cmp	r4, r3
 8003786:	d101      	bne.n	800378c <_fflush_r+0x38>
 8003788:	68ac      	ldr	r4, [r5, #8]
 800378a:	e7f1      	b.n	8003770 <_fflush_r+0x1c>
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <_fflush_r+0x50>)
 800378e:	429c      	cmp	r4, r3
 8003790:	bf08      	it	eq
 8003792:	68ec      	ldreq	r4, [r5, #12]
 8003794:	e7ec      	b.n	8003770 <_fflush_r+0x1c>
 8003796:	2000      	movs	r0, #0
 8003798:	bd38      	pop	{r3, r4, r5, pc}
 800379a:	bf00      	nop
 800379c:	08003b20 	.word	0x08003b20
 80037a0:	08003b40 	.word	0x08003b40
 80037a4:	08003b00 	.word	0x08003b00

080037a8 <_lseek_r>:
 80037a8:	b538      	push	{r3, r4, r5, lr}
 80037aa:	4605      	mov	r5, r0
 80037ac:	4608      	mov	r0, r1
 80037ae:	4611      	mov	r1, r2
 80037b0:	2200      	movs	r2, #0
 80037b2:	4c05      	ldr	r4, [pc, #20]	; (80037c8 <_lseek_r+0x20>)
 80037b4:	6022      	str	r2, [r4, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	f7fd fab5 	bl	8000d26 <_lseek>
 80037bc:	1c43      	adds	r3, r0, #1
 80037be:	d102      	bne.n	80037c6 <_lseek_r+0x1e>
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	b103      	cbz	r3, 80037c6 <_lseek_r+0x1e>
 80037c4:	602b      	str	r3, [r5, #0]
 80037c6:	bd38      	pop	{r3, r4, r5, pc}
 80037c8:	20000200 	.word	0x20000200

080037cc <__swhatbuf_r>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	460e      	mov	r6, r1
 80037d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d4:	b096      	sub	sp, #88	; 0x58
 80037d6:	2900      	cmp	r1, #0
 80037d8:	4614      	mov	r4, r2
 80037da:	461d      	mov	r5, r3
 80037dc:	da07      	bge.n	80037ee <__swhatbuf_r+0x22>
 80037de:	2300      	movs	r3, #0
 80037e0:	602b      	str	r3, [r5, #0]
 80037e2:	89b3      	ldrh	r3, [r6, #12]
 80037e4:	061a      	lsls	r2, r3, #24
 80037e6:	d410      	bmi.n	800380a <__swhatbuf_r+0x3e>
 80037e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ec:	e00e      	b.n	800380c <__swhatbuf_r+0x40>
 80037ee:	466a      	mov	r2, sp
 80037f0:	f000 f8be 	bl	8003970 <_fstat_r>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	dbf2      	blt.n	80037de <__swhatbuf_r+0x12>
 80037f8:	9a01      	ldr	r2, [sp, #4]
 80037fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80037fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003802:	425a      	negs	r2, r3
 8003804:	415a      	adcs	r2, r3
 8003806:	602a      	str	r2, [r5, #0]
 8003808:	e7ee      	b.n	80037e8 <__swhatbuf_r+0x1c>
 800380a:	2340      	movs	r3, #64	; 0x40
 800380c:	2000      	movs	r0, #0
 800380e:	6023      	str	r3, [r4, #0]
 8003810:	b016      	add	sp, #88	; 0x58
 8003812:	bd70      	pop	{r4, r5, r6, pc}

08003814 <__smakebuf_r>:
 8003814:	898b      	ldrh	r3, [r1, #12]
 8003816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003818:	079d      	lsls	r5, r3, #30
 800381a:	4606      	mov	r6, r0
 800381c:	460c      	mov	r4, r1
 800381e:	d507      	bpl.n	8003830 <__smakebuf_r+0x1c>
 8003820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003824:	6023      	str	r3, [r4, #0]
 8003826:	6123      	str	r3, [r4, #16]
 8003828:	2301      	movs	r3, #1
 800382a:	6163      	str	r3, [r4, #20]
 800382c:	b002      	add	sp, #8
 800382e:	bd70      	pop	{r4, r5, r6, pc}
 8003830:	ab01      	add	r3, sp, #4
 8003832:	466a      	mov	r2, sp
 8003834:	f7ff ffca 	bl	80037cc <__swhatbuf_r>
 8003838:	9900      	ldr	r1, [sp, #0]
 800383a:	4605      	mov	r5, r0
 800383c:	4630      	mov	r0, r6
 800383e:	f7ff faad 	bl	8002d9c <_malloc_r>
 8003842:	b948      	cbnz	r0, 8003858 <__smakebuf_r+0x44>
 8003844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003848:	059a      	lsls	r2, r3, #22
 800384a:	d4ef      	bmi.n	800382c <__smakebuf_r+0x18>
 800384c:	f023 0303 	bic.w	r3, r3, #3
 8003850:	f043 0302 	orr.w	r3, r3, #2
 8003854:	81a3      	strh	r3, [r4, #12]
 8003856:	e7e3      	b.n	8003820 <__smakebuf_r+0xc>
 8003858:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <__smakebuf_r+0x7c>)
 800385a:	62b3      	str	r3, [r6, #40]	; 0x28
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	6020      	str	r0, [r4, #0]
 8003860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003864:	81a3      	strh	r3, [r4, #12]
 8003866:	9b00      	ldr	r3, [sp, #0]
 8003868:	6120      	str	r0, [r4, #16]
 800386a:	6163      	str	r3, [r4, #20]
 800386c:	9b01      	ldr	r3, [sp, #4]
 800386e:	b15b      	cbz	r3, 8003888 <__smakebuf_r+0x74>
 8003870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003874:	4630      	mov	r0, r6
 8003876:	f000 f88d 	bl	8003994 <_isatty_r>
 800387a:	b128      	cbz	r0, 8003888 <__smakebuf_r+0x74>
 800387c:	89a3      	ldrh	r3, [r4, #12]
 800387e:	f023 0303 	bic.w	r3, r3, #3
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	81a3      	strh	r3, [r4, #12]
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	431d      	orrs	r5, r3
 800388c:	81a5      	strh	r5, [r4, #12]
 800388e:	e7cd      	b.n	800382c <__smakebuf_r+0x18>
 8003890:	08002c51 	.word	0x08002c51

08003894 <memchr>:
 8003894:	b510      	push	{r4, lr}
 8003896:	b2c9      	uxtb	r1, r1
 8003898:	4402      	add	r2, r0
 800389a:	4290      	cmp	r0, r2
 800389c:	4603      	mov	r3, r0
 800389e:	d101      	bne.n	80038a4 <memchr+0x10>
 80038a0:	2300      	movs	r3, #0
 80038a2:	e003      	b.n	80038ac <memchr+0x18>
 80038a4:	781c      	ldrb	r4, [r3, #0]
 80038a6:	3001      	adds	r0, #1
 80038a8:	428c      	cmp	r4, r1
 80038aa:	d1f6      	bne.n	800389a <memchr+0x6>
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd10      	pop	{r4, pc}

080038b0 <__malloc_lock>:
 80038b0:	4770      	bx	lr

080038b2 <__malloc_unlock>:
 80038b2:	4770      	bx	lr

080038b4 <_free_r>:
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	4605      	mov	r5, r0
 80038b8:	2900      	cmp	r1, #0
 80038ba:	d043      	beq.n	8003944 <_free_r+0x90>
 80038bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038c0:	1f0c      	subs	r4, r1, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bfb8      	it	lt
 80038c6:	18e4      	addlt	r4, r4, r3
 80038c8:	f7ff fff2 	bl	80038b0 <__malloc_lock>
 80038cc:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <_free_r+0x94>)
 80038ce:	6813      	ldr	r3, [r2, #0]
 80038d0:	4610      	mov	r0, r2
 80038d2:	b933      	cbnz	r3, 80038e2 <_free_r+0x2e>
 80038d4:	6063      	str	r3, [r4, #4]
 80038d6:	6014      	str	r4, [r2, #0]
 80038d8:	4628      	mov	r0, r5
 80038da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038de:	f7ff bfe8 	b.w	80038b2 <__malloc_unlock>
 80038e2:	42a3      	cmp	r3, r4
 80038e4:	d90b      	bls.n	80038fe <_free_r+0x4a>
 80038e6:	6821      	ldr	r1, [r4, #0]
 80038e8:	1862      	adds	r2, r4, r1
 80038ea:	4293      	cmp	r3, r2
 80038ec:	bf01      	itttt	eq
 80038ee:	681a      	ldreq	r2, [r3, #0]
 80038f0:	685b      	ldreq	r3, [r3, #4]
 80038f2:	1852      	addeq	r2, r2, r1
 80038f4:	6022      	streq	r2, [r4, #0]
 80038f6:	6063      	str	r3, [r4, #4]
 80038f8:	6004      	str	r4, [r0, #0]
 80038fa:	e7ed      	b.n	80038d8 <_free_r+0x24>
 80038fc:	4613      	mov	r3, r2
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	b10a      	cbz	r2, 8003906 <_free_r+0x52>
 8003902:	42a2      	cmp	r2, r4
 8003904:	d9fa      	bls.n	80038fc <_free_r+0x48>
 8003906:	6819      	ldr	r1, [r3, #0]
 8003908:	1858      	adds	r0, r3, r1
 800390a:	42a0      	cmp	r0, r4
 800390c:	d10b      	bne.n	8003926 <_free_r+0x72>
 800390e:	6820      	ldr	r0, [r4, #0]
 8003910:	4401      	add	r1, r0
 8003912:	1858      	adds	r0, r3, r1
 8003914:	4282      	cmp	r2, r0
 8003916:	6019      	str	r1, [r3, #0]
 8003918:	d1de      	bne.n	80038d8 <_free_r+0x24>
 800391a:	6810      	ldr	r0, [r2, #0]
 800391c:	6852      	ldr	r2, [r2, #4]
 800391e:	4401      	add	r1, r0
 8003920:	6019      	str	r1, [r3, #0]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	e7d8      	b.n	80038d8 <_free_r+0x24>
 8003926:	d902      	bls.n	800392e <_free_r+0x7a>
 8003928:	230c      	movs	r3, #12
 800392a:	602b      	str	r3, [r5, #0]
 800392c:	e7d4      	b.n	80038d8 <_free_r+0x24>
 800392e:	6820      	ldr	r0, [r4, #0]
 8003930:	1821      	adds	r1, r4, r0
 8003932:	428a      	cmp	r2, r1
 8003934:	bf01      	itttt	eq
 8003936:	6811      	ldreq	r1, [r2, #0]
 8003938:	6852      	ldreq	r2, [r2, #4]
 800393a:	1809      	addeq	r1, r1, r0
 800393c:	6021      	streq	r1, [r4, #0]
 800393e:	6062      	str	r2, [r4, #4]
 8003940:	605c      	str	r4, [r3, #4]
 8003942:	e7c9      	b.n	80038d8 <_free_r+0x24>
 8003944:	bd38      	pop	{r3, r4, r5, pc}
 8003946:	bf00      	nop
 8003948:	20000094 	.word	0x20000094

0800394c <_read_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4605      	mov	r5, r0
 8003950:	4608      	mov	r0, r1
 8003952:	4611      	mov	r1, r2
 8003954:	2200      	movs	r2, #0
 8003956:	4c05      	ldr	r4, [pc, #20]	; (800396c <_read_r+0x20>)
 8003958:	6022      	str	r2, [r4, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	f7fd f986 	bl	8000c6c <_read>
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d102      	bne.n	800396a <_read_r+0x1e>
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	b103      	cbz	r3, 800396a <_read_r+0x1e>
 8003968:	602b      	str	r3, [r5, #0]
 800396a:	bd38      	pop	{r3, r4, r5, pc}
 800396c:	20000200 	.word	0x20000200

08003970 <_fstat_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	2300      	movs	r3, #0
 8003974:	4c06      	ldr	r4, [pc, #24]	; (8003990 <_fstat_r+0x20>)
 8003976:	4605      	mov	r5, r0
 8003978:	4608      	mov	r0, r1
 800397a:	4611      	mov	r1, r2
 800397c:	6023      	str	r3, [r4, #0]
 800397e:	f7fd f9b9 	bl	8000cf4 <_fstat>
 8003982:	1c43      	adds	r3, r0, #1
 8003984:	d102      	bne.n	800398c <_fstat_r+0x1c>
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	b103      	cbz	r3, 800398c <_fstat_r+0x1c>
 800398a:	602b      	str	r3, [r5, #0]
 800398c:	bd38      	pop	{r3, r4, r5, pc}
 800398e:	bf00      	nop
 8003990:	20000200 	.word	0x20000200

08003994 <_isatty_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	2300      	movs	r3, #0
 8003998:	4c05      	ldr	r4, [pc, #20]	; (80039b0 <_isatty_r+0x1c>)
 800399a:	4605      	mov	r5, r0
 800399c:	4608      	mov	r0, r1
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	f7fd f9b7 	bl	8000d12 <_isatty>
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	d102      	bne.n	80039ae <_isatty_r+0x1a>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	b103      	cbz	r3, 80039ae <_isatty_r+0x1a>
 80039ac:	602b      	str	r3, [r5, #0]
 80039ae:	bd38      	pop	{r3, r4, r5, pc}
 80039b0:	20000200 	.word	0x20000200

080039b4 <_init>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	bf00      	nop
 80039b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ba:	bc08      	pop	{r3}
 80039bc:	469e      	mov	lr, r3
 80039be:	4770      	bx	lr

080039c0 <_fini>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	bf00      	nop
 80039c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c6:	bc08      	pop	{r3}
 80039c8:	469e      	mov	lr, r3
 80039ca:	4770      	bx	lr
